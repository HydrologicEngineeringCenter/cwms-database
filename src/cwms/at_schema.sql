/* Formatted on 2007/11/14 12:53 (Formatter Plus v4.8.8) */
/* CWMS Version 2.0 --
This script should be run by the cwms schema owner.
*/
SET serveroutput on
SET define on
@@defines.sql

----------------------------------------------------
-- drop tables, mviews & mview logs if they exist --
----------------------------------------------------

declare
   type id_array_t is table of varchar2 (32);

   table_names     id_array_t := new id_array_t();
   mview_log_names id_array_t := new id_array_t();
begin
   for rec in (select object_name 
                  from dba_objects 
                 where object_type = 'TABLE' 
                   and object_name not like 'AQ$%'
                   and object_name not like 'SYS\_%' escape '\')
   loop                       
      begin
            if substr(rec.object_name, 1, 6) = 'MLOG$_' then
                 execute immediate 'drop materialized view log on '
                                   || substr(rec.object_name, 7); 

                 dbms_output.put_line ('Dropped materialized view log on '
                                       || substr(rec.object_name, 7)
                    );
            else
               if substr(rec.object_name, 1, 3) = 'AT_'
                  and rec.object_name != 'AT_PARAMETER'
                  and rec.object_name != 'AT_DISPLAY_UNITS'
               then
                  execute immediate 'drop table '
                                     || rec.object_name
                              || ' cascade constraints';

                  dbms_output.put_line ('Dropped table ' || rec.object_name);
               end if;
            end if;
      exception               
         when others then null;             
      end;                    
   end loop;                  
end;
/

-------------------
-- CREATE TABLES --
-------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

-------------------------
-- AT_TS_TABLE_PROPERTIES table
-- 

CREATE TABLE at_ts_table_properties
(
  start_date  DATE                              NOT NULL,
  end_date    DATE                              NOT NULL,
  table_name  VARCHAR2(30 BYTE)                 NOT NULL,
  CONSTRAINT at_ts_table_properties_pk
 PRIMARY KEY
 (start_date)
)
ORGANIZATION INDEX
LOGGING
TABLESPACE CWMS_20AT_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
MONITORING
/

COMMIT ;

--
----
------
-- The at_ts_table_properties table is loaded with data
-- in the at_schema_tsv.sql ddl file.
------
----
--

---------------------------------
-- AT_BASE_LOCATION table.
-- 
CREATE TABLE at_base_location
(
  base_location_code  NUMBER,
  db_office_code      NUMBER                    NOT NULL,
  base_location_id    VARCHAR2(16 BYTE)         NOT NULL,
  active_flag         VARCHAR2(1 BYTE)
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON COLUMN at_base_location.db_office_code IS 'Refererences the office "owning" this location.  In the CWMS v2 schema, the office hosting the database "owns" all locations.';
COMMENT ON COLUMN at_base_location.base_location_id IS 'Text name of this Base Location';
COMMENT ON COLUMN at_base_location.active_flag IS 'Specifies whether data is being collected for this location';


CREATE UNIQUE INDEX at_base_location_pk ON at_base_location
(base_location_code)
LOGGING
tablespace CWMS_20DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/


CREATE UNIQUE INDEX at_base_location_idx1 ON at_base_location
(db_office_code, UPPER("BASE_LOCATION_ID"))
LOGGING
tablespace CWMS_20DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

ALTER TABLE at_base_location ADD (
   CONSTRAINT at_base_location_ck_1
   CHECK (TRIM("BASE_LOCATION_ID")="BASE_LOCATION_ID"))
/
--ALTER TABLE AT_BASE_LOCATION ADD (
--  CONSTRAINT AT_BASE_LOCATION_CK_2
-- CHECK (NVL("ACTIVE_FLAG",'T')='T'))
--/

ALTER TABLE at_base_location ADD (
  CONSTRAINT at_base_location_pk
 PRIMARY KEY
 (base_location_code)
    USING INDEX
    tablespace CWMS_20DATA
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64 k
                MINEXTENTS       1
                MAXEXTENTS       2147483645
                PCTINCREASE      0
               ))
/

ALTER TABLE at_base_location ADD (
  CONSTRAINT at_base_location_fk1
 FOREIGN KEY (db_office_code)
 REFERENCES cwms_office (office_code));
INSERT INTO at_base_location
            (base_location_code, db_office_code, base_location_id, active_flag
            )
     VALUES (0, (SELECT office_code
                   FROM cwms_office
                  WHERE office_id = 'CWMS'), 'Deleted TS ID', 'F'
            )
/
COMMIT;
--------------------
-- AT_PHYSICAL_LOCATION table
-- 


CREATE TABLE AT_PHYSICAL_LOCATION
(
  LOCATION_CODE       NUMBER(10)                NOT NULL,
  BASE_LOCATION_CODE  NUMBER(10)                NOT NULL,
  SUB_LOCATION_ID     VARCHAR2(32),
  TIME_ZONE_CODE      NUMBER(10),
  COUNTY_CODE         NUMBER(10),
  LOCATION_TYPE       VARCHAR2(32),
  ELEVATION           NUMBER,
  VERTICAL_DATUM      VARCHAR2(16),
  LONGITUDE           NUMBER,
  LATITUDE            NUMBER,
  HORIZONTAL_DATUM    VARCHAR2(16),
  PUBLIC_NAME         VARCHAR2(32),
  LONG_NAME           VARCHAR2(80),
  DESCRIPTION         VARCHAR2(1024),
  ACTIVE_FLAG         VARCHAR2(1),
  LOCATION_CATEGORY   NUMBER(10),
  MAP_LABEL           VARCHAR2(50),
  PUBLISHED_LATITUDE  NUMBER,
  PUBLISHED_LONGITUDE NUMBER,
  OFFICE_CODE         NUMBER(10),
  NATION_CODE         VARCHAR2(2),
  NEAREST_CITY        VARCHAR2(50)
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          504K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE  AT_PHYSICAL_LOCATION                     IS 'Defines unique locations';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.LOCATION_CODE       IS 'Unique record identifier, primarily used for internal database processing. This code is automatically assigned by the system.';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.TIME_ZONE_CODE      IS 'References the time zone associated with the geographic location.  Not necessarily the time zone of any data collected.';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.COUNTY_CODE         IS 'References the county containing this location';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.LOCATION_TYPE       IS 'User-defined type (e.g. "Stream Gage", "Reservoir", etc...), up to 16 characters.';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.ELEVATION           IS 'Elevation of location.';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.VERTICAL_DATUM      IS 'Datum of elevation.';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.LONGITUDE           IS 'Longitude of location.';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.LATITUDE            IS 'Latitude of location.';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.HORIZONTAL_DATUM    IS 'Datum of longitude and latitude.';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.PUBLIC_NAME         IS 'User-defined public name, up to 32 characters.';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.LONG_NAME           IS 'User-defined long name, up to 80 characters.';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.DESCRIPTION         IS 'User-defined description, up to 512 characters.';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.ACTIVE_FLAG         IS 'T or F';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.LOCATION_CATEGORY   IS 'Reference to location category in CWMS_LOCATION_CATEGORY';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.MAP_LABEL           IS 'User-defined label for map location (i.e., CorpsMap), max 50 characters.';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.PUBLISHED_LATITUDE  IS 'Latitude of location as published by owning agency.';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.PUBLISHED_LONGITUDE IS 'Longitude of location as published by owning agency.';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.OFFICE_CODE         IS 'References the office who''s bounday contains this location.';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.NATION_CODE         IS 'References the nation containing this location.';
COMMENT ON COLUMN AT_PHYSICAL_LOCATION.NEAREST_CITY        IS 'Name of city nearest this location.';

ALTER TABLE AT_PHYSICAL_LOCATION ADD CONSTRAINT AT_PHYSICAL_LOCATION_PK  PRIMARY KEY (LOCATION_CODE) USING INDEX;
ALTER TABLE AT_PHYSICAL_LOCATION ADD CONSTRAINT AT_PHYSICAL_LOCATION_CK1 CHECK (TRIM(SUB_LOCATION_ID) = SUB_LOCATION_ID);  
ALTER TABLE AT_PHYSICAL_LOCATION ADD CONSTRAINT AT_PHYSICAL_LOCATION_CK2 CHECK (ACTIVE_FLAG ='T' OR ACTIVE_FLAG = 'F');
ALTER TABLE AT_PHYSICAL_LOCATION ADD CONSTRAINT AT_PHYSICAL_LOCATION_FK1 FOREIGN KEY (BASE_LOCATION_CODE) REFERENCES AT_BASE_LOCATION (BASE_LOCATION_CODE); 
ALTER TABLE AT_PHYSICAL_LOCATION ADD CONSTRAINT AT_PHYSICAL_LOCATION_FK2 FOREIGN KEY (COUNTY_CODE) REFERENCES CWMS_COUNTY (COUNTY_CODE);  
ALTER TABLE AT_PHYSICAL_LOCATION ADD CONSTRAINT AT_PHYSICAL_LOCATION_FK3 FOREIGN KEY (TIME_ZONE_CODE) REFERENCES CWMS_TIME_ZONE (TIME_ZONE_CODE);
ALTER TABLE AT_PHYSICAL_LOCATION ADD CONSTRAINT AT_PHYSICAL_LOCATION_FK4 FOREIGN KEY (LOCATION_CATEGORY) REFERENCES CWMS_LOCATION_CATEGORY (CATEGORY_CODE);
ALTER TABLE AT_PHYSICAL_LOCATION ADD CONSTRAINT AT_PHYSICAL_LOCATION_FK5 FOREIGN KEY (OFFICE_CODE) REFERENCES CWMS_OFFICE (OFFICE_CODE);  
ALTER TABLE AT_PHYSICAL_LOCATION ADD CONSTRAINT AT_PHYSICAL_LOCATION_FK6 FOREIGN KEY (NATION_CODE) REFERENCES CWMS_NATION (NATION_CODE);  

CREATE UNIQUE INDEX AT_PHYSICAL_LOCATION_U1 ON AT_PHYSICAL_LOCATION (BASE_LOCATION_CODE, UPPER(SUB_LOCATION_ID))
LOGGING
TABLESPACE CWMS_20AT_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          104K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

   
INSERT INTO at_physical_location
            (location_code, base_location_code, active_flag)
     VALUES (0, 0, 'F');

COMMIT;

---------------------------------------------------------------------------
-- This information is not included directly in the AT_PHYSICAL_LOCATION --
-- table because doing so prevents using the table's materialized view   --
-- log for the MV_CWMS_TS_ID view, which is central to lots of stuff.    --
---------------------------------------------------------------------------
CREATE TABLE AT_GEOGRAPHIC_LOCATION
(
  LOCATION_CODE NUMBER(10)          NOT NULL,
  ID            VARCHAR2(32)        DEFAULT 'LOCATION',
  POINT         MDSYS.SDO_GEOMETRY,
  MULTI_POINT   MDSYS.SDO_GEOMETRY,
  POLYGON       MDSYS.SDO_GEOMETRY,
  DESCRIPTION   VARCHAR2(256)
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          504K
            NEXT             1M                                                     
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE  AT_GEOGRAPHIC_LOCATION               IS 'Geographic aspect of location';
COMMENT ON COLUMN AT_GEOGRAPHIC_LOCATION.ID            IS 'Text ID of point and/or multi-point and/or polygon';
COMMENT ON COLUMN AT_GEOGRAPHIC_LOCATION.LOCATION_CODE IS 'Reference to location';
COMMENT ON COLUMN AT_GEOGRAPHIC_LOCATION.POINT         IS 'Point location in WGS 84';
COMMENT ON COLUMN AT_GEOGRAPHIC_LOCATION.MULTI_POINT   IS 'Multi-point location in WGS 84';
COMMENT ON COLUMN AT_GEOGRAPHIC_LOCATION.POLYGON       IS 'Polygon location in WGS 84';
COMMENT ON COLUMN AT_GEOGRAPHIC_LOCATION.DESCRIPTION   IS 'Optional description';

ALTER TABLE AT_GEOGRAPHIC_LOCATION ADD CONSTRAINT AT_GEOGRAPHIC_LOCATION_PK  PRIMARY KEY (LOCATION_CODE) USING INDEX;
ALTER TABLE AT_GEOGRAPHIC_LOCATION ADD CONSTRAINT AT_GEOGRAPHIC_LOCATION_U1  UNIQUE (ID) USING INDEX;
ALTER TABLE AT_GEOGRAPHIC_LOCATION ADD CONSTRAINT AT_GEOGRAPHIC_LOCATION_CK1 CHECK (ID = UPPER(ID));
ALTER TABLE AT_GEOGRAPHIC_LOCATION ADD CONSTRAINT AT_GEOGRAPHIC_LOCATION_FK1 FOREIGN KEY (LOCATION_CODE) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE);

DELETE FROM USER_SDO_GEOM_METADATA WHERE TABLE_NAME='AT_GEOGRAPHIC_LOCATION';
DELETE FROM MDSYS.SDO_GEOM_METADATA_TABLE WHERE SDO_TABLE_NAME='AT_GEOGRAPHIC_LOCATION';

INSERT INTO MDSYS.SDO_GEOM_METADATA_TABLE VALUES (
   '&cwms_schema',
   'AT_GEOGRAPHIC_LOCATION',
   'POINT',
   SDO_DIM_ARRAY(
      SDO_DIM_ELEMENT('X', -180,  180, 0.01),
      SDO_DIM_ELEMENT('Y',  -90,   90, 0.01), 
      SDO_DIM_ELEMENT('Z', -420, 8850, 0.05)),
   (SELECT SRID 
      FROM MDSYS.CS_SRS 
     WHERE CS_NAME='WGS 84 (geographic 3D)'));

INSERT INTO MDSYS.SDO_GEOM_METADATA_TABLE VALUES (
   '&cwms_schema',
   'AT_GEOGRAPHIC_LOCATION',
   'MULTI_POINT',
   SDO_DIM_ARRAY(
      SDO_DIM_ELEMENT('X', -180,  180, 0.01),
      SDO_DIM_ELEMENT('Y',  -90,   90, 0.01), 
      SDO_DIM_ELEMENT('Z', -420, 8850, 0.05)),
   (SELECT SRID 
      FROM MDSYS.CS_SRS 
     WHERE CS_NAME='WGS 84 (geographic 3D)'));

INSERT INTO MDSYS.SDO_GEOM_METADATA_TABLE VALUES (
   '&cwms_schema',
   'AT_GEOGRAPHIC_LOCATION',
   'POLYGON',
   SDO_DIM_ARRAY(
      SDO_DIM_ELEMENT('X', -180,  180, 0.01),
      SDO_DIM_ELEMENT('Y',  -90,   90, 0.01), 
      SDO_DIM_ELEMENT('Z', -420, 8850, 0.05)),
   (SELECT SRID 
      FROM MDSYS.CS_SRS 
     WHERE CS_NAME='WGS 84 (geographic 3D)'));


CREATE INDEX AT_GEOGRAPHIC_LOCATION_PT_IDX
   ON AT_GEOGRAPHIC_LOCATION(POINT)
   INDEXTYPE IS MDSYS.SPATIAL_INDEX PARAMETERS ('layer_gtype=POINT');

CREATE INDEX AT_GEOGRAPHIC_LOCATION_MP_IDX
   ON AT_GEOGRAPHIC_LOCATION(MULTI_POINT)
   INDEXTYPE IS MDSYS.SPATIAL_INDEX PARAMETERS ('layer_gtype=MULTIPOINT');

CREATE INDEX AT_GEOGRAPHIC_LOCATION_PG_IDX
   ON AT_GEOGRAPHIC_LOCATION(POLYGON)
   INDEXTYPE IS MDSYS.SPATIAL_INDEX PARAMETERS ('layer_gtype=POLYGON');

CREATE TABLE AT_LOCATION_URL
(
   LOCATION_CODE NUMBER(10),
   URL_ID        VARCHAR2(32),
   URL_ADDRESS   VARCHAR2(1024),
   URL_TITLE     VARCHAR2(256)
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          24K
            NEXT             24K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/


COMMENT ON TABLE  AT_LOCATION_URL               IS 'Contains URLs pertaining to specific locations.';
COMMENT ON COLUMN AT_LOCATION_URL.LOCATION_CODE IS 'Reference to location.';
COMMENT ON COLUMN AT_LOCATION_URL.URL_ID        IS 'Short identifier for URL.';
COMMENT ON COLUMN AT_LOCATION_URL.URL_ADDRESS   IS 'The URL.';
COMMENT ON COLUMN AT_LOCATION_URL.URL_TITLE     IS 'Title for URL display.';

ALTER TABLE AT_LOCATION_URL ADD CONSTRAINT AT_LOCATION_URL_PK  PRIMARY KEY (LOCATION_CODE, URL_ID) USING INDEX;
ALTER TABLE AT_LOCATION_URL ADD CONSTRAINT AT_LOCATION_URL_CK1 CHECK (TRIM(URL_ID) = URL_ID);
ALTER TABLE AT_LOCATION_URL ADD CONSTRAINT AT_LOCATION_URL_CK2 CHECK (TRIM(URL_ADDRESS) = URL_ADDRESS);
ALTER TABLE AT_LOCATION_URL ADD CONSTRAINT AT_LOCATION_URL_CK3 CHECK (TRIM(URL_TITLE) = URL_TITLE);
ALTER TABLE AT_LOCATION_URL ADD CONSTRAINT AT_LOCATION_URL_FK1 FOREIGN KEY (LOCATION_CODE) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE);

CREATE UNIQUE INDEX AT_LOCATION_URL_U1 ON AT_LOCATION_URL (LOCATION_CODE, UPPER(URL_ID))
LOGGING
TABLESPACE CWMS_20AT_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          10K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

CREATE TABLE AT_SPECIFIED_LEVEL
(
   SPECIFIED_LEVEL_CODE NUMBER(10)    NOT NULL,
   OFFICE_CODE          NUMBER(10)    NOT NULL,
   SPECIFIED_LEVEL_ID   VARCHAR2(256) NOT NULL,
   DESCRIPTION          VARCHAR2(256)
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          10K
            NEXT             10K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE  AT_SPECIFIED_LEVEL                      IS 'Contains stream levels of interest.';
COMMENT ON COLUMN AT_SPECIFIED_LEVEL.SPECIFIED_LEVEL_CODE IS 'Primary key to relate stream levels to other entities.';
COMMENT ON COLUMN AT_SPECIFIED_LEVEL.OFFICE_CODE          IS 'Reference to office specifying this level.';
COMMENT ON COLUMN AT_SPECIFIED_LEVEL.SPECIFIED_LEVEL_ID   IS 'Name of level (i.e,. ''Flood'', ''Normal Pool'', ''Out of bank'', ''Max of record'').';
COMMENT ON COLUMN AT_SPECIFIED_LEVEL.DESCRIPTION          IS 'Optional description.';

ALTER TABLE AT_SPECIFIED_LEVEL ADD CONSTRAINT AT_SPECIFIED_LEVEL_PK  PRIMARY KEY (SPECIFIED_LEVEL_CODE);
ALTER TABLE AT_SPECIFIED_LEVEL ADD CONSTRAINT AT_SPECIFIED_LEVEL_CK1 CHECK (TRIM(SPECIFIED_LEVEL_ID) = SPECIFIED_LEVEL_ID);
ALTER TABLE AT_SPECIFIED_LEVEL ADD CONSTRAINT AT_SPECIFIED_LEVEL_FK1 FOREIGN KEY (OFFICE_CODE) REFERENCES CWMS_OFFICE (OFFICE_CODE);

CREATE UNIQUE INDEX AT_SPECIFIED_LEVEL_U1 ON AT_SPECIFIED_LEVEL (OFFICE_CODE, UPPER(SPECIFIED_LEVEL_ID))
LOGGING
TABLESPACE CWMS_20AT_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          10K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

COMMIT;

INSERT INTO AT_SPECIFIED_LEVEL VALUES( 1, 53, 'Regulating', 'Regulating Level');
INSERT INTO AT_SPECIFIED_LEVEL VALUES( 2, 53, 'Flood', 'Flood Level');
INSERT INTO AT_SPECIFIED_LEVEL VALUES( 3, 53, 'Max Non-Damaging', 'Maximum Without Causing Damage');
INSERT INTO AT_SPECIFIED_LEVEL VALUES( 4, 53, 'Top of Conservation', 'Top Conservation Pool Level');
INSERT INTO AT_SPECIFIED_LEVEL VALUES( 5, 53, 'Top of Dam', 'Top of Dam Level');
INSERT INTO AT_SPECIFIED_LEVEL VALUES( 6, 53, 'Top of Downstream', 'Top of Downstream Pool');
INSERT INTO AT_SPECIFIED_LEVEL VALUES( 7, 53, 'Top of Flood', 'Top of Flood Pool Level');
INSERT INTO AT_SPECIFIED_LEVEL VALUES( 8, 53, 'Top of Inactive', 'Top of Inactive Pool Level');
INSERT INTO AT_SPECIFIED_LEVEL VALUES( 9, 53, 'Top of Induced Surcharge', 'Top of Induced Surcharge Pool');
INSERT INTO AT_SPECIFIED_LEVEL VALUES(10, 53, 'Bottom of Normal', 'Bottom of Normal Pool');
INSERT INTO AT_SPECIFIED_LEVEL VALUES(11, 53, 'Top of Normal', 'Top of Normal Pool');
INSERT INTO AT_SPECIFIED_LEVEL VALUES(12, 53, 'Top of Overflow', 'Top of Overflow Section');
INSERT INTO AT_SPECIFIED_LEVEL VALUES(13, 53, 'Guide Curve', 'Limits based on season and an attribute');

CREATE TABLE AT_LOCATION_LEVEL
(
   LOCATION_LEVEL_CODE           NUMBER(10) NOT NULL,
   LOCATION_CODE                 NUMBER(10) NOT NULL,
   SPECIFIED_LEVEL_CODE          NUMBER(10) NOT NULL,
   PARAMETER_CODE                NUMBER(10) NOT NULL,
   PARAMETER_TYPE_CODE           NUMBER(10) NOT NULL,
   DURATION_CODE                 NUMBER(10) NOT NULL,
   LOCATION_LEVEL_DATE           DATE NOT NULL,
   LOCATION_LEVEL_VALUE          NUMBER,
   LOCATION_LEVEL_COMMENT        VARCHAR2(256),
   ATTRIBUTE_VALUE               NUMBER,
   ATTRIBUTE_PARAMETER_CODE      NUMBER(10),
   ATTRIBUTE_PARAMETER_TYPE_CODE NUMBER(10),
   ATTRIBUTE_DURATION_CODE       NUMBER(10),
   ATTRIBUTE_COMMENT             VARCHAR2(256),
   INTERVAL_ORIGIN               DATE,
   CALENDAR_INTERVAL             INTERVAL YEAR TO MONTH,
   TIME_INTERVAL                 INTERVAL DAY TO SECOND,
   INTERPOLATE                   VARCHAR2(1) DEFAULT 'T'
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          24K
            NEXT             24K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE  AT_LOCATION_LEVEL                               IS 'Contains levels of interest at specific locations.';
COMMENT ON COLUMN AT_LOCATION_LEVEL.LOCATION_LEVEL_CODE           IS 'Primary key that relates location levels to other entities.';
COMMENT ON COLUMN AT_LOCATION_LEVEL.LOCATION_CODE                 IS 'References a location.';
COMMENT ON COLUMN AT_LOCATION_LEVEL.SPECIFIED_LEVEL_CODE          IS 'References a specified level.';
COMMENT ON COLUMN AT_LOCATION_LEVEL.PARAMETER_CODE                IS 'References the parameter for the level value.';
COMMENT ON COLUMN AT_LOCATION_LEVEL.PARAMETER_TYPE_CODE           IS 'References parameter type.';
COMMENT ON COLUMN AT_LOCATION_LEVEL.DURATION_CODE                 IS 'References duration.';
COMMENT ON COLUMN AT_LOCATION_LEVEL.LOCATION_LEVEL_VALUE          IS 'Value of non-seasonal level.';
COMMENT ON COLUMN AT_LOCATION_LEVEL.LOCATION_LEVEL_COMMENT        IS 'Optional comment/description of the level.';
COMMENT ON COLUMN AT_LOCATION_LEVEL.LOCATION_LEVEL_DATE           IS 'Observed date or effective date depending on type of level';
COMMENT ON COLUMN AT_LOCATION_LEVEL.ATTRIBUTE_VALUE               IS 'Value of attribute that constrains applicability of this level.';
COMMENT ON COLUMN AT_LOCATION_LEVEL.ATTRIBUTE_PARAMETER_CODE      IS 'References the parameter for the attribute value.';
COMMENT ON COLUMN AT_LOCATION_LEVEL.ATTRIBUTE_PARAMETER_TYPE_CODE IS 'References parameter type for the attribute value.';
COMMENT ON COLUMN AT_LOCATION_LEVEL.ATTRIBUTE_DURATION_CODE       IS 'References duration for the attribute value.';
COMMENT ON COLUMN AT_LOCATION_LEVEL.ATTRIBUTE_COMMENT             IS 'Optional comment/description of the attribute.';
COMMENT ON COLUMN AT_LOCATION_LEVEL.CALENDAR_INTERVAL             IS 'Interval period for seasonal levels if period is specified in years or months.';
COMMENT ON COLUMN AT_LOCATION_LEVEL.TIME_INTERVAL                 IS 'Interval period for seasonal levels if period is specified in days.';
COMMENT ON COLUMN AT_LOCATION_LEVEL.INTERVAL_ORIGIN               IS 'Origin time in UTC for interval period - required if time interval is not null';
COMMENT ON COLUMN AT_LOCATION_LEVEL.INTERPOLATE                   IS 'Values between offset are interpolated bewteen dates (T) or take the most recent value (F).';


ALTER TABLE AT_LOCATION_LEVEL ADD CONSTRAINT AT_LOCATION_LEVEL_PK  PRIMARY KEY (LOCATION_LEVEL_CODE) USING INDEX;
ALTER TABLE AT_LOCATION_LEVEL ADD CONSTRAINT AT_LOCATION_LEVEL_U1  UNIQUE (LOCATION_CODE, SPECIFIED_LEVEL_CODE, PARAMETER_CODE, DURATION_CODE, LOCATION_LEVEL_DATE, ATTRIBUTE_PARAMETER_CODE,ATTRIBUTE_VALUE) USING INDEX;
ALTER TABLE AT_LOCATION_LEVEL ADD CONSTRAINT AT_LOCATION_LEVEL_CK1 CHECK (LOCATION_LEVEL_VALUE IS NOT NULL OR (CALENDAR_INTERVAL IS NOT NULL OR TIME_INTERVAL IS NOT NULL));
ALTER TABLE AT_LOCATION_LEVEL ADD CONSTRAINT AT_LOCATION_LEVEL_CK2 CHECK (CALENDAR_INTERVAL IS NULL OR TIME_INTERVAL IS NULL);
ALTER TABLE AT_LOCATION_LEVEL ADD CONSTRAINT AT_LOCATION_LEVEL_CK3 CHECK (NOT (TIME_INTERVAL IS NOT NULL AND INTERVAL_ORIGIN IS NULL));
ALTER TABLE AT_LOCATION_LEVEL ADD CONSTRAINT AT_LOCATION_LEVEL_CK4 CHECK (INTERPOLATE IS NULL OR INTERPOLATE IN ('T', 'F'));
ALTER TABLE AT_LOCATION_LEVEL ADD CONSTRAINT AT_LOCATION_LEVEL_CK5 CHECK (NOT (LOCATION_LEVEL_VALUE IS NULL AND INTERPOLATE IS NULL));
ALTER TABLE AT_LOCATION_LEVEL ADD CONSTRAINT AT_LOCATION_LEVEL_CK6 CHECK (NOT (ATTRIBUTE_VALUE IS NOT NULL AND (ATTRIBUTE_PARAMETER_CODE IS NULL OR ATTRIBUTE_PARAMETER_TYPE_CODE IS NULL OR ATTRIBUTE_DURATION_CODE IS NULL)));
ALTER TABLE AT_LOCATION_LEVEL ADD CONSTRAINT AT_LOCATION_LEVEL_FK1 FOREIGN KEY (LOCATION_CODE) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE);
ALTER TABLE AT_LOCATION_LEVEL ADD CONSTRAINT AT_LOCATION_LEVEL_FK2 FOREIGN KEY (SPECIFIED_LEVEL_CODE) REFERENCES AT_SPECIFIED_LEVEL (SPECIFIED_LEVEL_CODE);
ALTER TABLE AT_LOCATION_LEVEL ADD CONSTRAINT AT_LOCATION_LEVEL_FK3 FOREIGN KEY (PARAMETER_CODE) REFERENCES AT_PARAMETER (PARAMETER_CODE);
ALTER TABLE AT_LOCATION_LEVEL ADD CONSTRAINT AT_LOCATION_LEVEL_FK4 FOREIGN KEY (PARAMETER_TYPE_CODE) REFERENCES CWMS_PARAMETER_TYPE (PARAMETER_TYPE_CODE);
ALTER TABLE AT_LOCATION_LEVEL ADD CONSTRAINT AT_LOCATION_LEVEL_FK5 FOREIGN KEY (DURATION_CODE) REFERENCES CWMS_DURATION (DURATION_CODE);
ALTER TABLE AT_LOCATION_LEVEL ADD CONSTRAINT AT_LOCATION_LEVEL_FK6 FOREIGN KEY (ATTRIBUTE_PARAMETER_CODE) REFERENCES AT_PARAMETER (PARAMETER_CODE);
ALTER TABLE AT_LOCATION_LEVEL ADD CONSTRAINT AT_LOCATION_LEVEL_FK7 FOREIGN KEY (ATTRIBUTE_PARAMETER_TYPE_CODE) REFERENCES CWMS_PARAMETER_TYPE (PARAMETER_TYPE_CODE);
ALTER TABLE AT_LOCATION_LEVEL ADD CONSTRAINT AT_LOCATION_LEVEL_FK8 FOREIGN KEY (ATTRIBUTE_DURATION_CODE) REFERENCES CWMS_DURATION (DURATION_CODE);

CREATE TABLE AT_SEASONAL_LOCATION_LEVEL
(
   LOCATION_LEVEL_CODE NUMBER(10) NOT NULL,
   CALENDAR_OFFSET     INTERVAL YEAR TO MONTH,
   TIME_OFFSET         INTERVAL DAY TO SECOND,
   VALUE               NUMBER     NOT NULL
)   
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          24K
            NEXT             24K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE  AT_SEASONAL_LOCATION_LEVEL                     IS 'Contains seasonal levels for specific locations.';
COMMENT ON COLUMN AT_SEASONAL_LOCATION_LEVEL.LOCATION_LEVEL_CODE IS 'References specified level at a specific location.';
COMMENT ON COLUMN AT_SEASONAL_LOCATION_LEVEL.CALENDAR_OFFSET     IS 'Months from beginning of period (added to minutes) to this offset.';
COMMENT ON COLUMN AT_SEASONAL_LOCATION_LEVEL.TIME_OFFSET         IS 'Mintues from beginning of period (added to months) to this offset.';
COMMENT ON COLUMN AT_SEASONAL_LOCATION_LEVEL.VALUE               IS 'Seasonal value at this offset in period.';

ALTER TABLE AT_SEASONAL_LOCATION_LEVEL ADD CONSTRAINT AT_SEASONAL_LOCATION_LEVEL_PK  PRIMARY KEY (LOCATION_LEVEL_CODE, CALENDAR_OFFSET, TIME_OFFSET) USING INDEX;
ALTER TABLE AT_SEASONAL_LOCATION_LEVEL ADD CONSTRAINT AT_SEASONAL_LOCATION_LEVEL_FK1 FOREIGN KEY (LOCATION_LEVEL_CODE) REFERENCES AT_LOCATION_LEVEL (LOCATION_LEVEL_CODE);
ALTER TABLE AT_SEASONAL_LOCATION_LEVEL ADD CONSTRAINT AT_SEASONAL_LOCATION_LEVEL_CK1 CHECK (NOT (CALENDAR_OFFSET IS NULL AND TIME_OFFSET IS NULL));

CREATE TABLE AT_STREAM
(
  LOCATION_CODE      NUMBER(10)    NOT NULL,
  ZERO_STATION       VARCHAR2(2),
  DIVERTING_STREAM   NUMBER(10),
  DIVERSION_STATION  NUMBER,
  DIVERSION_BANK     VARCHAR2(1),
  RECEIVING_STREAM   NUMBER(10),
  CONFLUENCE_STATION NUMBER,
  CONFLUENCE_BANK    VARCHAR2(1),
  STREAM_LENGTH      NUMBER,
  AVERAGE_SLOPE      NUMBER
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          10K
            NEXT             10K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE  AT_STREAM                    IS 'Contains non-geographic information for streams';
COMMENT ON COLUMN AT_STREAM.LOCATION_CODE      IS 'References stream location.';
COMMENT ON COLUMN AT_STREAM.ZERO_STATION       IS 'Specifies whether streams stationing begins upstream or downstream';
COMMENT ON COLUMN AT_STREAM.DIVERTING_STREAM   IS 'Reference to stream this stream diverted from';
COMMENT ON COLUMN AT_STREAM.DIVERSION_STATION  IS 'Station of diversion on reference stream';
COMMENT ON COLUMN AT_STREAM.DIVERSION_BANK     IS 'Bank of diversion on reference stream';
COMMENT ON COLUMN AT_STREAM.RECEIVING_STREAM   IS 'Reference to stream this stream flows into';
COMMENT ON COLUMN AT_STREAM.CONFLUENCE_STATION IS 'Station of confluence on reference stream';
COMMENT ON COLUMN AT_STREAM.CONFLUENCE_BANK    IS 'Bank of confluence on reference stream';
COMMENT ON COLUMN AT_STREAM.STREAM_LENGTH      IS 'Length of this stream';
COMMENT ON COLUMN AT_STREAM.AVERAGE_SLOPE      IS 'Average slope in percent over the entire length of the stream';

ALTER TABLE AT_STREAM ADD CONSTRAINT AT_STREAM_PK  PRIMARY KEY (LOCATION_CODE) USING INDEX;
ALTER TABLE AT_STREAM ADD CONSTRAINT AT_STREAM_FK1 FOREIGN KEY (LOCATION_CODE) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE);
ALTER TABLE AT_STREAM ADD CONSTRAINT AT_STREAM_FK2 FOREIGN KEY (DIVERTING_STREAM) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE);
ALTER TABLE AT_STREAM ADD CONSTRAINT AT_STREAM_FK3 FOREIGN KEY (RECEIVING_STREAM) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE);
ALTER TABLE AT_STREAM ADD CONSTRAINT AT_STREAM_CK1 CHECK (ZERO_STATION = 'US' OR ZERO_STATION = 'DS');
ALTER TABLE AT_STREAM ADD CONSTRAINT AT_STREAM_CK2 CHECK (DIVERSION_BANK IS NULL OR DIVERSION_BANK = 'R' OR DIVERSION_BANK = 'L');
ALTER TABLE AT_STREAM ADD CONSTRAINT AT_STREAM_CK3 CHECK (CONFLUENCE_BANK IS NULL OR CONFLUENCE_BANK = 'R' OR CONFLUENCE_BANK = 'L');

CREATE OR REPLACE TRIGGER AT_STREAM_TRIG
BEFORE INSERT OR UPDATE
OF LOCATION_CODE
ON AT_STREAM REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   L_CATEGORY_ID     CWMS_LOCATION_CATEGORY.CATEGORY_ID%TYPE;
   L_LOCATION_ID     AT_BASE_LOCATION.BASE_LOCATION_ID%TYPE;
   L_OFFICE_ID       CWMS_OFFICE.OFFICE_ID%TYPE;
   L_SUB_LOCATION_ID AT_PHYSICAL_LOCATION.SUB_LOCATION_ID%TYPE;
BEGIN
   BEGIN
      SELECT CATEGORY_ID
        INTO L_CATEGORY_ID
        FROM CWMS_LOCATION_CATEGORY C,
             AT_PHYSICAL_LOCATION  L
       WHERE L.LOCATION_CODE = :NEW.LOCATION_CODE
         AND C.CATEGORY_CODE = L.LOCATION_CATEGORY;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN NULL;         
   END;
   IF L_CATEGORY_ID != 'STREAM' THEN
      SELECT O.OFFICE_ID,
             B.BASE_LOCATION_ID,
             L.SUB_LOCATION_ID
        INTO L_OFFICE_ID,
             L_LOCATION_ID,
             L_SUB_LOCATION_ID
        FROM AT_PHYSICAL_LOCATION L,
             AT_BASE_LOCATION      B,
             CWMS_OFFICE           O
       WHERE L.LOCATION_CODE = :NEW.LOCATION_CODE
         AND B.BASE_LOCATION_CODE = L.BASE_LOCATION_CODE
         AND O.OFFICE_CODE = B.DB_OFFICE_CODE;
         
      CWMS_ERR.RAISE(
         'ERROR',
         'Location '
         || L_OFFICE_ID
         || '.'
         || L_LOCATION_ID
         || CASE L_SUB_LOCATION_ID IS NULL
               WHEN TRUE THEN NULL
               ELSE '-' || L_SUB_LOCATION_ID
            END
         || ' is not identified as a stream location.');         
   END IF;       
END AT_STREAM_TRIG;
/
CREATE TABLE AT_STREAM_TYPE
(
   LOCATION_CODE    NUMBER(10) NOT NULL,
   STREAM_TYPE_CODE NUMBER(10) NOT NULL
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          10K
            NEXT             10K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE  AT_STREAM_TYPE                  IS 'Relates specific streams to stream types (one-to-many).';
COMMENT ON COLUMN AT_STREAM_TYPE.LOCATION_CODE    IS 'References stream.';
COMMENT ON COLUMN AT_STREAM_TYPE.STREAM_TYPE_CODE IS 'References stream type.';

ALTER TABLE AT_STREAM_TYPE ADD CONSTRAINT AT_STREAM_TYPE_PK  PRIMARY KEY (LOCATION_CODE, STREAM_TYPE_CODE);
ALTER TABLE AT_STREAM_TYPE ADD CONSTRAINT AT_STREAM_TYPE_FK1 FOREIGN KEY (LOCATION_CODE) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE);
ALTER TABLE AT_STREAM_TYPE ADD CONSTRAINT AT_STREAM_TYPE_FK2 FOREIGN KEY (STREAM_TYPE_CODE) REFERENCES CWMS_STREAM_TYPE (STREAM_TYPE_CODE);

CREATE OR REPLACE TRIGGER AT_STREAM_TYPE_TRIG
BEFORE INSERT OR UPDATE
OF LOCATION_CODE
ON AT_STREAM_TYPE REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   L_CATEGORY_ID     CWMS_LOCATION_CATEGORY.CATEGORY_ID%TYPE;
   L_LOCATION_ID     AT_BASE_LOCATION.BASE_LOCATION_ID%TYPE;
   L_OFFICE_ID       CWMS_OFFICE.OFFICE_ID%TYPE;
   L_SUB_LOCATION_ID AT_PHYSICAL_LOCATION.SUB_LOCATION_ID%TYPE;
BEGIN
   BEGIN
      SELECT CATEGORY_ID
        INTO L_CATEGORY_ID
        FROM CWMS_LOCATION_CATEGORY C,
             AT_PHYSICAL_LOCATION  L
       WHERE L.LOCATION_CODE = :NEW.LOCATION_CODE
         AND C.CATEGORY_CODE = L.LOCATION_CATEGORY;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN NULL;         
   END;
   IF L_CATEGORY_ID != 'STREAM' THEN
      SELECT O.OFFICE_ID,
             B.BASE_LOCATION_ID,
             L.SUB_LOCATION_ID
        INTO L_OFFICE_ID,
             L_LOCATION_ID,
             L_SUB_LOCATION_ID
        FROM AT_PHYSICAL_LOCATION L,
             AT_BASE_LOCATION      B,
             CWMS_OFFICE           O
       WHERE L.LOCATION_CODE = :NEW.LOCATION_CODE
         AND B.BASE_LOCATION_CODE = L.BASE_LOCATION_CODE
         AND O.OFFICE_CODE = B.DB_OFFICE_CODE;
         
      CWMS_ERR.RAISE(
         'ERROR',
         'Location '
         || L_OFFICE_ID
         || '.'
         || L_LOCATION_ID
         || CASE L_SUB_LOCATION_ID IS NULL
               WHEN TRUE THEN NULL
               ELSE '-' || L_SUB_LOCATION_ID
            END
         || ' is not identified as a stream location.');         
   END IF;       
END AT_STREAM_TYPE_TRIG;
/
CREATE TABLE AT_STREAM_LOCATION
(
  LOCATION_CODE           NUMBER(10)    NOT NULL,
  STATION                 NUMBER        NOT NULL,
  BANK                    VARCHAR2(1),
  GAGE_ZERO_ELEVATION     NUMBER,
  LOWEST_MEASURABLE_STAGE NUMBER,
  DRAINAGE_AREA           NUMBER,
  UNGAGED_AREA            NUMBER
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          10K
            NEXT             10K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE  AT_STREAM_LOCATION                         IS 'Contains metadata for stream locations';
COMMENT ON COLUMN AT_STREAM_LOCATION.LOCATION_CODE           IS 'Reference to physical location on stream';
COMMENT ON COLUMN AT_STREAM_LOCATION.STATION                 IS 'Station in m of stream at location';
COMMENT ON COLUMN AT_STREAM_LOCATION.BANK                    IS 'Bank of stream at location';
COMMENT ON COLUMN AT_STREAM_LOCATION.GAGE_ZERO_ELEVATION     IS 'Elevation in m of stage 0.0';
COMMENT ON COLUMN AT_STREAM_LOCATION.LOWEST_MEASURABLE_STAGE IS 'Lowest stage in m that is measurable at this stream location.';
COMMENT ON COLUMN AT_STREAM_LOCATION.DRAINAGE_AREA           IS 'Total drainage area in km2 above this stream location.';
COMMENT ON COLUMN AT_STREAM_LOCATION.UNGAGED_AREA            IS 'Drainage area in km2 above this stream location and below upstream gage(s).';

ALTER TABLE AT_STREAM_LOCATION ADD CONSTRAINT AT_STREAM_LOCATION_PK  PRIMARY KEY (LOCATION_CODE) USING INDEX;
ALTER TABLE AT_STREAM_LOCATION ADD CONSTRAINT AT_STREAM_LOCATION_FK1 FOREIGN KEY (LOCATION_CODE) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE);
ALTER TABLE AT_STREAM_LOCATION ADD CONSTRAINT AT_STREAM_LOCATION_CK1 CHECK (BANK IS NULL OR BANK = 'R' OR BANK = 'L');

CREATE OR REPLACE TRIGGER AT_STREAM_LOCATION_TRIG
BEFORE INSERT OR UPDATE
OF LOCATION_CODE
ON AT_STREAM_LOCATION REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   L_CATEGORY_ID     CWMS_LOCATION_CATEGORY.CATEGORY_ID%TYPE;
   L_LOCATION_ID     AT_BASE_LOCATION.BASE_LOCATION_ID%TYPE;
   L_OFFICE_ID       CWMS_OFFICE.OFFICE_ID%TYPE;
   L_SUB_LOCATION_ID AT_PHYSICAL_LOCATION.SUB_LOCATION_ID%TYPE;
BEGIN
   BEGIN
      SELECT CATEGORY_ID
        INTO L_CATEGORY_ID
        FROM CWMS_LOCATION_CATEGORY C,
             AT_PHYSICAL_LOCATION  L
       WHERE L.LOCATION_CODE = :NEW.LOCATION_CODE
         AND C.CATEGORY_CODE = L.LOCATION_CATEGORY;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN NULL;         
   END;
   IF L_CATEGORY_ID != 'POINT' THEN
      SELECT O.OFFICE_ID,
             B.BASE_LOCATION_ID,
             L.SUB_LOCATION_ID
        INTO L_OFFICE_ID,
             L_LOCATION_ID,
             L_SUB_LOCATION_ID
        FROM AT_PHYSICAL_LOCATION L,
             AT_BASE_LOCATION      B,
             CWMS_OFFICE           O
       WHERE L.LOCATION_CODE = :NEW.LOCATION_CODE
         AND B.BASE_LOCATION_CODE = L.BASE_LOCATION_CODE
         AND O.OFFICE_CODE = B.DB_OFFICE_CODE;
         
      CWMS_ERR.RAISE(
         'ERROR',
         'Location '
         || L_OFFICE_ID
         || '.'
         || L_LOCATION_ID
         || CASE L_SUB_LOCATION_ID IS NULL
               WHEN TRUE THEN NULL
               ELSE '-' || L_SUB_LOCATION_ID
            END
         || ' is not identified as a point location.');         
   END IF;       
END AT_STREAM_LOCATION_TRIG;
/
CREATE TABLE AT_BASIN
(
  LOCATION_CODE              NUMBER(10)    NOT NULL,
  TOTAL_DRAINAGE_AREA        NUMBER,
  CONTRIBUTING_DRAINAGE_AREA NUMBER,
  ONE_INCH_RUNOFF            NUMBER,
  PRIMARY_STREAM             NUMBER(10),
  PARENT_BASIN               NUMBER(10),
  SORT_ORDER                 NUMBER
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          10K
            NEXT             10K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE  AT_BASIN                              IS 'Contains non-geographic information for basins';
COMMENT ON COLUMN AT_BASIN.LOCATION_CODE                IS 'References basin location.';
COMMENT ON COLUMN AT_BASIN.TOTAL_DRAINAGE_AREA          IS 'Total area of basin';
COMMENT ON COLUMN AT_BASIN.CONTRIBUTING_DRAINAGE_AREA   IS 'Contributing drainage area of basin';
COMMENT ON COLUMN AT_BASIN.ONE_INCH_RUNOFF              IS 'Volume resulting from 1 inch of runoff over entire basin';
COMMENT ON COLUMN AT_BASIN.PRIMARY_STREAM               IS 'Reference to the stream record that the impoundment lies on';
COMMENT ON COLUMN AT_BASIN.PARENT_BASIN                 IS 'Reference to containing basin';
COMMENT ON COLUMN AT_BASIN.SORT_ORDER                   IS 'Sorting order for application use';

ALTER TABLE AT_BASIN ADD CONSTRAINT AT_BASIN_PK  PRIMARY KEY (LOCATION_CODE) USING INDEX;
ALTER TABLE AT_BASIN ADD CONSTRAINT AT_BASIN_FK2 FOREIGN KEY (PRIMARY_STREAM) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE);
ALTER TABLE AT_BASIN ADD CONSTRAINT AT_BASIN_FK3 FOREIGN KEY (PARENT_BASIN) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE);

CREATE OR REPLACE TRIGGER AT_BASIN_TRIG
BEFORE INSERT OR UPDATE
OF LOCATION_CODE
ON AT_BASIN REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   L_CATEGORY_ID     CWMS_LOCATION_CATEGORY.CATEGORY_ID%TYPE;
   L_LOCATION_ID     AT_BASE_LOCATION.BASE_LOCATION_ID%TYPE;
   L_OFFICE_ID       CWMS_OFFICE.OFFICE_ID%TYPE;
   L_SUB_LOCATION_ID AT_PHYSICAL_LOCATION.SUB_LOCATION_ID%TYPE;
BEGIN
   BEGIN
      SELECT CATEGORY_ID
        INTO L_CATEGORY_ID
        FROM CWMS_LOCATION_CATEGORY C,
             AT_PHYSICAL_LOCATION  L
       WHERE L.LOCATION_CODE = :NEW.LOCATION_CODE
         AND C.CATEGORY_CODE = L.LOCATION_CATEGORY;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN NULL;         
   END;
   IF L_CATEGORY_ID != 'BASIN' THEN
      SELECT O.OFFICE_ID,
             B.BASE_LOCATION_ID,
             L.SUB_LOCATION_ID
        INTO L_OFFICE_ID,
             L_LOCATION_ID,
             L_SUB_LOCATION_ID
        FROM AT_PHYSICAL_LOCATION L,
             AT_BASE_LOCATION      B,
             CWMS_OFFICE           O
       WHERE L.LOCATION_CODE = :NEW.LOCATION_CODE
         AND B.BASE_LOCATION_CODE = L.BASE_LOCATION_CODE
         AND O.OFFICE_CODE = B.DB_OFFICE_CODE;
         
      CWMS_ERR.RAISE(
         'ERROR',
         'Location '
         || L_OFFICE_ID
         || '.'
         || L_LOCATION_ID
         || CASE L_SUB_LOCATION_ID IS NULL
               WHEN TRUE THEN NULL
               ELSE '-' || L_SUB_LOCATION_ID
            END
         || ' is not identified as a basin location.');         
   END IF;       
END AT_BASIN_TRIG;
/
CREATE TABLE AT_GAGE
(
  LOCATION_CODE       NUMBER(10)    NOT NULL,
  GAGE_TYPE           NUMBER(10)    NOT NULL,
  DISCONTINUED        VARCHAR2(1)   DEFAULT 'F',
  OUT_OF_SERVICE      VARCHAR2(1)   DEFAULT 'F',
  REPORTS_METRIC      VARCHAR2(1)   DEFAULT 'F',
  PHONE_NUMBER        VARCHAR2(16),
  INTERNET_ADDRESS    VARCHAR2(32),
  OTHER_ACCESS_ID     VARCHAR2(32),
  ASSOCIATED_LOCATION NUMBER(10)
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          504K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE AT_GAGE                      IS 'Contains gage type information for locations';
COMMENT ON COLUMN AT_GAGE.LOCATION_CODE       IS 'References location.';
COMMENT ON COLUMN AT_GAGE.GAGE_TYPE           IS 'Refernce to gage type.';
COMMENT ON COLUMN AT_GAGE.DISCONTINUED        IS 'Gage has been discontinued (T) or not (F).';
COMMENT ON COLUMN AT_GAGE.OUT_OF_SERVICE      IS 'Gage is currently out of service (T) or not (F).';
COMMENT ON COLUMN AT_GAGE.REPORTS_METRIC      IS 'Gage reports in SI (T) or English (F).';
COMMENT ON COLUMN AT_GAGE.PHONE_NUMBER        IS 'Telephone number for remote access to gage.';
COMMENT ON COLUMN AT_GAGE.INTERNET_ADDRESS    IS 'IP address for remote access to gage.';
COMMENT ON COLUMN AT_GAGE.OTHER_ACCESS_ID     IS 'Other remote access id.';
COMMENT ON COLUMN AT_GAGE.ASSOCIATED_LOCATION IS 'Reference to location of an associated gage (i.e., headwater/tailwater).';

ALTER TABLE AT_GAGE ADD CONSTRAINT AT_GAGE_PK  PRIMARY KEY (LOCATION_CODE) USING INDEX;
ALTER TABLE AT_GAGE ADD CONSTRAINT AT_GAGE_CK1 CHECK (DISCONTINUED ='T' OR DISCONTINUED = 'F');
ALTER TABLE AT_GAGE ADD CONSTRAINT AT_GAGE_CK2 CHECK (OUT_OF_SERVICE ='T' OR OUT_OF_SERVICE = 'F');
ALTER TABLE AT_GAGE ADD CONSTRAINT AT_GAGE_CK3 CHECK (REPORTS_METRIC ='T' OR REPORTS_METRIC = 'F');
ALTER TABLE AT_GAGE ADD CONSTRAINT AT_GAGE_FK2 FOREIGN KEY (LOCATION_CODE) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE);  
ALTER TABLE AT_GAGE ADD CONSTRAINT AT_GAGE_FK1 FOREIGN KEY (GAGE_TYPE) REFERENCES CWMS_GAGE_TYPE (GAGE_TYPE_CODE);  
ALTER TABLE AT_GAGE ADD CONSTRAINT AT_GAGE_FK3 FOREIGN KEY (ASSOCIATED_LOCATION) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE);  

CREATE TABLE AT_GOES
(
   LOCATION_CODE       NUMBER(10)  NOT NULL,
   GOES_SATELLITE      VARCHAR2(1) NOT NULL,
   SELFTIMED_CHANNEL   NUMBER(4),
   SELFTIMED_DATA_RATE NUMBER(4),
   SELFTIMED_INTERVAL  INTERVAL DAY TO SECOND,
   SELFTIMED_OFFSET    INTERVAL DAY TO SECOND,
   SELFTIMED_LENGTH    INTERVAL DAY TO SECOND,   
   RANDOM_CHANNEL      NUMBER(4),
   RANDOM_DATA_RATE    NUMBER(4),
   RANDOM_INTERVAL     INTERVAL DAY TO SECOND,
   RANDOM_OFFSET       INTERVAL DAY TO SECOND
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          24K
            NEXT             24K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE  AT_GOES                     IS 'Contains information about GOES transmissions from location.';
COMMENT ON COLUMN AT_GOES.LOCATION_CODE       IS 'References location.';
COMMENT ON COLUMN AT_GOES.GOES_SATELLITE      IS 'GOES-EAST (E) or GOES-WEST (W).';
COMMENT ON COLUMN AT_GOES.SELFTIMED_CHANNEL   IS 'GOES channel for self-timed transmissions.';
COMMENT ON COLUMN AT_GOES.SELFTIMED_DATA_RATE IS 'Date rate in bits/second for self-timed transmissions.';
COMMENT ON COLUMN AT_GOES.SELFTIMED_INTERVAL  IS 'Recurrence interval for self-timed transmissions.';
COMMENT ON COLUMN AT_GOES.SELFTIMED_OFFSET    IS 'Offset into recurrence interval for self-timed transmissions.';
COMMENT ON COLUMN AT_GOES.SELFTIMED_LENGTH    IS 'Length of self-timed transmission window.';
COMMENT ON COLUMN AT_GOES.RANDOM_CHANNEL      IS 'GOES channel for random (triggered) transmissions.';
COMMENT ON COLUMN AT_GOES.RANDOM_DATA_RATE    IS 'Date rate in bits/second for random (triggered) transmissions.';
COMMENT ON COLUMN AT_GOES.RANDOM_INTERVAL     IS 'Recurrence interval of programmed random transmissions.';
COMMENT ON COLUMN AT_GOES.RANDOM_OFFSET       IS 'Offset into recurrence interval for programmed random transmissions.';

ALTER TABLE AT_GOES ADD CONSTRAINT AT_GOES_PK  PRIMARY KEY (LOCATION_CODE) USING INDEX;
ALTER TABLE AT_GOES ADD CONSTRAINT AT_GOES_CK1 CHECK (GOES_SATELLITE = 'E' OR GOES_SATELLITE = 'W');
ALTER TABLE AT_GOES ADD CONSTRAINT AT_GOES_FK1 FOREIGN KEY (LOCATION_CODE) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE); 

CREATE TABLE AT_FORECAST
(
   LOCATION_CODE       NUMBER(10)   NOT NULL,
   FORECAST_LOCATION   NUMBER(10)   NOT NULL,
   SOURCE_AGENCY       VARCHAR2(5),
   SOURCE_OFFICE       VARCHAR2(5),
   FORECAST_TYPE       VARCHAR2(5),
   MISSING_LIMIT       NUMBER(4)
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          24K
            NEXT             24K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE  AT_FORECAST                   IS 'Contains forecast information for specific locations.';
COMMENT ON COLUMN AT_FORECAST.LOCATION_CODE     IS 'References location.';
COMMENT ON COLUMN AT_FORECAST.FORECAST_LOCATION IS 'Reference to location that is the source of forecats for this location.';
COMMENT ON COLUMN AT_FORECAST.SOURCE_AGENCY     IS 'Agency that generates forecasts for this location (USACE or NWS).';
COMMENT ON COLUMN AT_FORECAST.SOURCE_OFFICE     IS 'Office that generates forecasts for this location (i.e., NCRFC or MVR).';
COMMENT ON COLUMN AT_FORECAST.FORECAST_TYPE     IS 'Type of forecast used at this location (i.e., RVS, RFD, etc...).';
COMMENT ON COLUMN AT_FORECAST.MISSING_LIMIT     IS 'Age of existing forecast in hours before a new forecast is considered missing.';

ALTER TABLE AT_FORECAST ADD CONSTRAINT AT_FORECAST_PK  PRIMARY KEY (LOCATION_CODE) USING INDEX;
ALTER TABLE AT_FORECAST ADD CONSTRAINT AT_FORECAST_CK1 CHECK (SOURCE_AGENCY = 'USACE' OR SOURCE_AGENCY = 'NWS');
ALTER TABLE AT_FORECAST ADD CONSTRAINT AT_FORECAST_CK2 CHECK (TRIM(SOURCE_OFFICE) = SOURCE_OFFICE);
ALTER TABLE AT_FORECAST ADD CONSTRAINT AT_FORECAST_CK3 CHECK (TRIM(FORECAST_TYPE) = FORECAST_TYPE);
ALTER TABLE AT_FORECAST ADD CONSTRAINT AT_FORECAST_FK1 FOREIGN KEY (LOCATION_CODE) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE);  
ALTER TABLE AT_FORECAST ADD CONSTRAINT AT_FORECAST_FK2 FOREIGN KEY (FORECAST_LOCATION) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE);  

CREATE TABLE AT_DISPLAY
(
   LOCATION_CODE  NUMBER(10) NOT NULL,
   PARAMETER_CODE NUMBER(10) NOT NULL,
   SCALE_MAX      NUMBER,
   SCALE_MIN      NUMBER       
)   
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          24K
            NEXT             24K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE  AT_DISPLAY                IS 'Contains display information for values at a location.';
COMMENT ON COLUMN AT_DISPLAY.LOCATION_CODE  IS 'References a location.';
COMMENT ON COLUMN AT_DISPLAY.PARAMETER_CODE IS 'References parameter.';

ALTER TABLE AT_DISPLAY ADD CONSTRAINT AT_DISPLAY_PK  PRIMARY KEY (LOCATION_CODE, PARAMETER_CODE) USING INDEX;
ALTER TABLE AT_DISPLAY ADD CONSTRAINT AT_DISPLAY_FK1 FOREIGN KEY (LOCATION_CODE) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE);

CREATE TABLE AT_DISPLAY_INDICATOR
(
   LOCATION_CODE           NUMBER(10)              NOT NULL,
   PARAMETER_CODE          NUMBER(10)              NOT NULL,
   PARAMETER_TYPE_CODE     NUMBER(10)              NOT NULL,
   DURATION_CODE           NUMBER(10),
   LOCATION_LEVEL_CODE     NUMBER(10),
   RATE_OF_CHANGE          NUMBER,
   ASCENDING_DESCENDING    VARCHAR2(10),
   COMPARATOR              VARCHAR2(2)             NOT NULL,
   REQUIRED_DURATION       INTERVAL DAY TO SECOND,
   INDICATOR_LEVEL         NUMBER(1)               NOT NULL,
   MISSING_LIMIT           NUMBER(4)
)   
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
    PCTFREE    10
INITRANS   1
    MAXTRANS   255
    STORAGE    (
            INITIAL          24K
            NEXT             24K
                MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON TABLE  AT_DISPLAY_INDICATOR                     IS 'Contains information for generating indicator levels at a location.';
COMMENT ON COLUMN AT_DISPLAY_INDICATOR.LOCATION_CODE       IS 'References a location.';
COMMENT ON COLUMN AT_DISPLAY_INDICATOR.PARAMETER_CODE      IS 'References parameter.';
COMMENT ON COLUMN AT_DISPLAY_INDICATOR.PARAMETER_TYPE_CODE IS 'References parameter type.';
COMMENT ON COLUMN AT_DISPLAY_INDICATOR.DURATION_CODE       IS 'References duration.';
COMMENT ON COLUMN AT_DISPLAY_INDICATOR.LOCATION_LEVEL_CODE IS 'References a level of interest for this location.';
COMMENT ON COLUMN AT_DISPLAY_INDICATOR.COMPARATOR          IS 'Operator for comparing to level (GT, GE, EQ, LE, LT, NE).';
COMMENT ON COLUMN AT_DISPLAY_INDICATOR.REQUIRED_DURATION   IS 'Minimum duration of condition required for indicator to be set.';
COMMENT ON COLUMN AT_DISPLAY_INDICATOR.INDICATOR_LEVEL     IS 'Indicator level if the comparator is true for the specified minumum duration (1 - 5).';
COMMENT ON COLUMN AT_DISPLAY_INDICATOR.MISSING_LIMIT       IS 'Age of newest data in hours before a data is considered missing.';

ALTER TABLE AT_DISPLAY_INDICATOR ADD CONSTRAINT AT_DISPLAY_INDICATOR_CK1 CHECK (COMPARATOR IN ('GT', 'GE', 'EQ', 'LE', 'LT', 'NE'));
ALTER TABLE AT_DISPLAY_INDICATOR ADD CONSTRAINT AT_DISPLAY_INDICATOR_CK2 CHECK ((LOCATION_LEVEL_CODE IS NOT NULL AND RATE_OF_CHANGE IS NULL) OR (LOCATION_LEVEL_CODE IS NULL AND RATE_OF_CHANGE IS NOT NULL));
ALTER TABLE AT_DISPLAY_INDICATOR ADD CONSTRAINT AT_DISPLAY_INDICATOR_CK3 CHECK ((RATE_OF_CHANGE IS NULL AND ASCENDING_DESCENDING IS NULL) OR (RATE_OF_CHANGE IS NOT NULL AND ASCENDING_DESCENDING IS NOT NULL));
ALTER TABLE AT_DISPLAY_INDICATOR ADD CONSTRAINT AT_DISPLAY_INDICATOR_CK4 CHECK (ASCENDING_DESCENDING IS NULL OR ASCENDING_DESCENDING = 'ASCENDING' OR ASCENDING_DESCENDING = 'DESCENDING');
ALTER TABLE AT_DISPLAY_INDICATOR ADD CONSTRAINT AT_DISPLAY_INDICATOR_CK5 CHECK (INDICATOR_LEVEL IN (1, 2, 3, 4, 5));
ALTER TABLE AT_DISPLAY_INDICATOR ADD CONSTRAINT AT_DISPLAY_INDICATOR_FK1 FOREIGN KEY (LOCATION_CODE) REFERENCES AT_PHYSICAL_LOCATION (LOCATION_CODE);
ALTER TABLE AT_DISPLAY_INDICATOR ADD CONSTRAINT AT_DISPLAY_INDICATOR_FK2 FOREIGN KEY (PARAMETER_CODE) REFERENCES AT_PARAMETER (PARAMETER_CODE);
ALTER TABLE AT_DISPLAY_INDICATOR ADD CONSTRAINT AT_DISPLAY_INDICATOR_FK3 FOREIGN KEY (PARAMETER_TYPE_CODE) REFERENCES CWMS_PARAMETER_TYPE (PARAMETER_TYPE_CODE);
ALTER TABLE AT_DISPLAY_INDICATOR ADD CONSTRAINT AT_DISPLAY_INDICATOR_FK4 FOREIGN KEY (DURATION_CODE) REFERENCES CWMS_DURATION (DURATION_CODE);
ALTER TABLE AT_DISPLAY_INDICATOR ADD CONSTRAINT AT_DISPLAY_INDICATOR_FK5 FOREIGN KEY (LOCATION_LEVEL_CODE) REFERENCES AT_LOCATION_LEVEL (LOCATION_LEVEL_CODE);

CREATE UNIQUE INDEX AT_DISPLAY_INDICATOR_U1 ON AT_DISPLAY_INDICATOR 
(
   LOCATION_CODE, 
   PARAMETER_CODE, 
   PARAMETER_TYPE_CODE,
   NVL(DURATION_CODE, '@'),
   NVL(LOCATION_LEVEL_CODE, 0),
   NVL(RATE_OF_CHANGE, 0), 
   NVL(ASCENDING_DESCENDING, '@'),
   NVL(REQUIRED_DURATION, TO_DSINTERVAL('0 0:0:0')),
   INDICATOR_LEVEL
            )
LOGGING
TABLESPACE CWMS_20AT_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          10K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
            )
NOPARALLEL
/

COMMIT;
---------------
------------------

CREATE TABLE at_loc_category
(
  loc_category_code  NUMBER,
  loc_category_id    VARCHAR2(32 BYTE)          NOT NULL,
  db_office_code     NUMBER                     NOT NULL,
  loc_category_desc  VARCHAR2(128 BYTE)
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING
/

CREATE UNIQUE INDEX at_loc_category_name_pk ON at_loc_category
(loc_category_code)
LOGGING
TABLESPACE CWMS_20AT_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

CREATE UNIQUE INDEX at_loc_category_name_u1 ON at_loc_category
(UPPER("LOC_CATEGORY_ID"), db_office_code)
LOGGING
TABLESPACE CWMS_20AT_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

ALTER TABLE at_loc_category ADD (
  CONSTRAINT at_loc_category_name_pk
 PRIMARY KEY
 (loc_category_code)
    USING INDEX
    TABLESPACE CWMS_20AT_DATA
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64 k
                MINEXTENTS       1
                MAXEXTENTS       2147483645
                PCTINCREASE      0
               ))
/

ALTER TABLE AT_LOC_CATEGORY ADD CONSTRAINT AT_LOC_CATEGORY_FK1 FOREIGN KEY (DB_OFFICE_CODE) REFERENCES CWMS_OFFICE (OFFICE_CODE);

INSERT INTO at_loc_category
            (loc_category_code, loc_category_id, db_office_code,
             loc_category_desc
            )
     VALUES (0, 'Default', 53,
             'Default'
            );
INSERT 
  INTO at_loc_category 
VALUES (/* loc_category_code */ 1,                                      
        /* loc_category_id   */ 'Agency Aliases',                       
        /* db_office_code    */ 53,                                     
        /* loc_category_desc */ 'Location aliases for other agencies'); 

--------
--------

CREATE TABLE at_loc_group
(
  loc_group_code     NUMBER,
  loc_category_code  NUMBER                     NOT NULL,
  loc_group_id       VARCHAR2(32 BYTE)          NOT NULL,
  loc_group_desc     VARCHAR2(128 BYTE),
  db_office_code     NUMBER                     NOT NULL
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING
/

CREATE UNIQUE INDEX at_loc_groups_pk ON at_loc_group
(loc_group_code)
LOGGING
TABLESPACE CWMS_20AT_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

CREATE UNIQUE INDEX at_loc_groups_u1 ON at_loc_group
(loc_category_code, UPPER("LOC_GROUP_ID"))
LOGGING
TABLESPACE CWMS_20AT_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

ALTER TABLE at_loc_group ADD (
  CONSTRAINT at_loc_groups_pk
 PRIMARY KEY
 (loc_group_code)
    USING INDEX
    TABLESPACE CWMS_20AT_DATA
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64 k
                MINEXTENTS       1
                MAXEXTENTS       2147483645
                PCTINCREASE      0
               ))
/

ALTER TABLE at_loc_group ADD (
  CONSTRAINT at_loc_groups_fk2
 FOREIGN KEY (db_office_code)
 REFERENCES cwms_office (office_code))
/
ALTER TABLE at_loc_group ADD (
  CONSTRAINT at_loc_groups_fk1
 FOREIGN KEY (loc_category_code)
 REFERENCES at_loc_category (loc_category_code))
/
INSERT INTO at_loc_group VALUES (0, 0, 'Default',             'All Locations',                                            53);
INSERT INTO at_loc_group VALUES (1, 1, 'USGS Station Name',   'US Geological Survey Station Name',                        53);
INSERT INTO at_loc_group VALUES (2, 1, 'USGS Station Number', 'US Geological Survey Station Number',                      53);
INSERT INTO at_loc_group VALUES (3, 1, 'NWS Handbook 5 ID',   'National Weather Service Handbook 5 ID',                   53);
INSERT INTO at_loc_group VALUES (4, 1, 'DCP Platform ID',     'Data Collection Platform ID',                              53);
INSERT INTO at_loc_group VALUES (5, 1, 'SHEF Location ID',    'Standard Hydrometeorological Exchange Format Location ID', 53);
INSERT INTO at_loc_group VALUES (6, 1, 'CBT Station ID',      'Columbia Basin Teletype Station ID',                       53);
INSERT INTO at_loc_group VALUES (7, 1, 'USBR Station ID',     'US Bureau of Reclamation Station ID',                      53);
INSERT INTO at_loc_group VALUES (8, 1, 'TVA Station ID',      'Tennessee Valley Authority Station ID',                    53);
INSERT INTO at_loc_group VALUES (9, 1, 'NRCS Station ID',     'Natural Resources Conservation Service Station ID',        53);
COMMIT ;
-----

CREATE TABLE at_loc_group_assignment
(
  location_code   NUMBER,
  loc_group_code  NUMBER,
  loc_attribute   NUMBER,
  loc_alias_id    VARCHAR2(128 BYTE)
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING
/

CREATE UNIQUE INDEX at_loc_group_assignment_pk ON at_loc_group_assignment
(location_code, loc_group_code)
LOGGING
TABLESPACE CWMS_20AT_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

ALTER TABLE at_loc_group_assignment ADD (
  CONSTRAINT at_loc_group_assignment_pk
 PRIMARY KEY
 (location_code, loc_group_code)
    USING INDEX
    TABLESPACE CWMS_20AT_DATA
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64 k
                MINEXTENTS       1
                MAXEXTENTS       2147483645
                PCTINCREASE      0
               ))
/

ALTER TABLE at_loc_group_assignment ADD (
  CONSTRAINT at_loc_group_assignment_fk1
 FOREIGN KEY (location_code)
 REFERENCES at_physical_location (location_code))
/
ALTER TABLE at_loc_group_assignment ADD (
  CONSTRAINT at_loc_group_assignment_fk2
 FOREIGN KEY (loc_group_code)
 REFERENCES at_loc_group (loc_group_code))
/

INSERT INTO at_loc_group_assignment
            (location_code, loc_group_code, loc_alias_id
            )
     VALUES (0, 0, NULL
            );
COMMIT ;
----------
----------
-----------
-----------------
----------------------
--------------------------



---------------------------------
-- AT_CWMS_TS_SPEC table.
-- 

CREATE TABLE at_cwms_ts_spec
(
  ts_code              NUMBER                   NOT NULL,
  location_code        NUMBER                   NOT NULL,
  parameter_code       NUMBER                   NOT NULL,
  parameter_type_code  NUMBER(10)               NOT NULL,
  interval_code        NUMBER(10)               NOT NULL,
  duration_code        NUMBER(10)               NOT NULL,
  VERSION              VARCHAR2(32 BYTE)        NOT NULL,
  description          VARCHAR2(80 BYTE),
  interval_utc_offset  NUMBER                   NOT NULL,
  interval_forward     NUMBER,
  interval_backward    NUMBER,
  interval_offset_id   VARCHAR2(16 BYTE),
  time_zone_code       NUMBER(10),
  version_flag         VARCHAR2(1 BYTE),
  migrate_ver_flag     VARCHAR2(1 BYTE),
  active_flag          VARCHAR2(1 BYTE),
  delete_date          DATE,
  data_source          VARCHAR2(16 BYTE)
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          5 m
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING
/


COMMENT ON TABLE at_cwms_ts_spec IS 'Defines time series based on CWMS requirements.  This table also serves as time series specification super type.';
COMMENT ON COLUMN at_cwms_ts_spec.description IS 'Additional information.';
COMMENT ON COLUMN at_cwms_ts_spec.version_flag IS 'Default is NULL, indicating versioning is off. If set to "Y" then versioning is on';
COMMENT ON COLUMN at_cwms_ts_spec.migrate_ver_flag IS 'Default is NULL, indicating versioned data is not migrated to historic tables.  If set to "Y", versioned data is archived.';
COMMENT ON COLUMN at_cwms_ts_spec.active_flag IS 'T or F';
COMMENT ON COLUMN at_cwms_ts_spec.delete_date IS 'Is the date that this ts_id was marked for deletion.';
COMMENT ON COLUMN at_cwms_ts_spec.ts_code IS 'Unique record identifier, primarily used for internal database processing. This code is automatically assigned by the system.';
COMMENT ON COLUMN at_cwms_ts_spec.location_code IS 'Primary key of AT_PHYSICAL_LOCATION table.';
COMMENT ON COLUMN at_cwms_ts_spec.parameter_code IS 'Primary key of AT_PARAMETER table.  Must already exist in the AT_PARAMETER table.';
COMMENT ON COLUMN at_cwms_ts_spec.parameter_type_code IS 'Primary key of CWMS_PARAMETER_TYPE table.  Must already exist in the CWMS_PARAMETER_TYPE table.';

CREATE UNIQUE INDEX at_cwms_ts_spec_ui ON at_cwms_ts_spec
(location_code, parameter_type_code, parameter_code, interval_code,
duration_code, UPPER("VERSION"), delete_date)
LOGGING
TABLESPACE CWMS_20AT_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          24 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/


CREATE UNIQUE INDEX at_cwms_ts_spec_pk ON at_cwms_ts_spec
(ts_code)
LOGGING
tablespace CWMS_20DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

ALTER TABLE at_cwms_ts_spec ADD (
  CONSTRAINT at_cwms_ts_spec_ck_3
 CHECK (TRIM(VERSION)=VERSION))
/
ALTER TABLE at_cwms_ts_spec ADD (
  CONSTRAINT at_cwms_ts_spec_ck_4
 CHECK (NVL(version_flag,'T')='T'))
/
ALTER TABLE at_cwms_ts_spec ADD (
  CONSTRAINT at_cwms_ts_spec_ck_5
 CHECK (active_flag ='T' OR active_flag = 'F'))
/
ALTER TABLE at_cwms_ts_spec ADD (
  CONSTRAINT at_cwms_ts_spec_pk
 PRIMARY KEY
 (ts_code)
    USING INDEX
    tablespace CWMS_20DATA
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64 k
                MINEXTENTS       1
                MAXEXTENTS       2147483645
                PCTINCREASE      0
               ))
/

ALTER TABLE at_cwms_ts_spec ADD (
  CONSTRAINT at_cwms_ts_spec_fk_1
 FOREIGN KEY (parameter_type_code)
 REFERENCES cwms_parameter_type (parameter_type_code))
/

ALTER TABLE at_cwms_ts_spec ADD (
  CONSTRAINT at_cwms_ts_spec_fk_2
 FOREIGN KEY (parameter_code)
 REFERENCES at_parameter (parameter_code))
/

ALTER TABLE at_cwms_ts_spec ADD (
  CONSTRAINT at_cwms_ts_spec_fk_3
 FOREIGN KEY (interval_code)
 REFERENCES cwms_interval (interval_code))
/

ALTER TABLE at_cwms_ts_spec ADD (
  CONSTRAINT at_cwms_ts_spec_fk_4
 FOREIGN KEY (duration_code)
 REFERENCES cwms_duration (duration_code))
/

ALTER TABLE at_cwms_ts_spec ADD (
  CONSTRAINT at_cwms_ts_spec_fk_5
 FOREIGN KEY (location_code)
 REFERENCES at_physical_location (location_code))
/

ALTER TABLE at_cwms_ts_spec ADD (
  CONSTRAINT at_cwms_ts_spec_fk_6
 FOREIGN KEY (time_zone_code)
 REFERENCES cwms_time_zone (time_zone_code))
/

---------------------------------
-- AT_SCREENING table.
-- 
CREATE TABLE at_screening
(
  ts_code            NUMBER,
  screening_code     NUMBER                     NOT NULL,
  active_flag        VARCHAR2(1 BYTE),
  resultant_ts_code  NUMBER
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON COLUMN at_screening.active_flag IS 'T of F';

CREATE UNIQUE INDEX at_screening_pk ON at_screening
(ts_code)
LOGGING
tablespace CWMS_20DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

ALTER TABLE at_screening ADD (
  CONSTRAINT at_screening_pk
 PRIMARY KEY
 (ts_code)
    USING INDEX
    tablespace CWMS_20DATA
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64 k
                MINEXTENTS       1
                MAXEXTENTS       2147483645
                PCTINCREASE      0
               ))
/

ALTER TABLE at_screening ADD (
  CONSTRAINT at_screening_fk02
 FOREIGN KEY (resultant_ts_code)
 REFERENCES at_cwms_ts_spec (ts_code))
/


---------------------------------
-- AT_ALARM table.
-- 
CREATE TABLE at_alarm
(
  ts_code      NUMBER,
  ts_ni_hash   VARCHAR2(80 BYTE)                NOT NULL,
  alarm_code   NUMBER                           NOT NULL,
  active_flag  VARCHAR2(1 BYTE)
)
tablespace CWMS_20DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING
/

COMMENT ON COLUMN at_alarm.active_flag IS 'T or F';

CREATE UNIQUE INDEX at_alarm_pk ON at_alarm
(ts_code)
LOGGING
tablespace CWMS_20DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

ALTER TABLE at_alarm ADD (
  CONSTRAINT at_alarm_pk
 PRIMARY KEY
 (ts_code)
    USING INDEX
    tablespace CWMS_20DATA
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64 k
                MINEXTENTS       1
                MAXEXTENTS       2147483645
                PCTINCREASE      0
               ))
/


---------------------------------
-- AT_COMP_VT table.
-- 

CREATE TABLE at_comp_vt
(
  comp_vt_code           NUMBER,
  comp_vt_id             VARCHAR2(16 BYTE),
  db_office_code         NUMBER,
  filename_datchk1       VARCHAR2(32 BYTE),
  filename_datchk2       VARCHAR2(32 BYTE),
  filename_trn_in        VARCHAR2(32 BYTE),
  default_time_window    VARCHAR2(32 BYTE),
  context_start_date     VARCHAR2(32 BYTE),
  exchange_set_extract   VARCHAR2(32 BYTE),
  exchange_set_post_raw  VARCHAR2(32 BYTE),
  exchange_set_post_rev  VARCHAR2(32 BYTE)
)
tablespace CWMS_20DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING
/

CREATE UNIQUE INDEX at_comp_vt_pk ON at_comp_vt
(comp_vt_code)
LOGGING
tablespace CWMS_20DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

CREATE UNIQUE INDEX at_comp_vt_u01 ON at_comp_vt
(comp_vt_id, db_office_code)
LOGGING
tablespace CWMS_20DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

ALTER TABLE at_comp_vt ADD (
  CONSTRAINT at_comp_vt_pk
 PRIMARY KEY
 (comp_vt_code)
    USING INDEX
    tablespace CWMS_20DATA
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64 k
                MINEXTENTS       1
                MAXEXTENTS       2147483645
                PCTINCREASE      0
               ))
/

ALTER TABLE at_comp_vt ADD (
  CONSTRAINT at_comp_vt_u01
 UNIQUE (comp_vt_id, db_office_code)
    USING INDEX
    tablespace CWMS_20DATA
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64 k
                MINEXTENTS       1
                MAXEXTENTS       2147483645
                PCTINCREASE      0
               ))
/

ALTER TABLE at_comp_vt ADD (
  CONSTRAINT at_comp_vt_r01
 FOREIGN KEY (db_office_code)
 REFERENCES cwms_office (office_code))
/
---------------------------------
-- AT_TRANSFORM_CRITERIA table.
-- 

CREATE TABLE at_transform_criteria
(
  ts_code                       NUMBER,
  dssmath_macro_call            VARCHAR2(128 BYTE),
  dssmath_post_raw              VARCHAR2(1 BYTE),
  comp_vt_code                  NUMBER,
  call_seq_table_lookup         NUMBER,
  call_seq_scaling              NUMBER,
  scaling_factor                NUMBER,
  scaling_offset                NUMBER,
  call_seq_mass_curve_to_inc    NUMBER,
  call_seq_inc_to_mass_curve    NUMBER,
  call_seq_interval_conversion  NUMBER,
  resultant_ts_code             NUMBER
)
tablespace CWMS_20DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING
/

CREATE UNIQUE INDEX at_transform_criteria_pk ON at_transform_criteria
(ts_code)
LOGGING
tablespace CWMS_20DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

CREATE UNIQUE INDEX at_transform_criteria_u02 ON at_transform_criteria
(resultant_ts_code)
LOGGING
tablespace CWMS_20DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

ALTER TABLE at_transform_criteria ADD (
  CONSTRAINT at_transform_criteria_pk
 PRIMARY KEY
 (ts_code)
    USING INDEX
    tablespace CWMS_20DATA
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64 k
                MINEXTENTS       1
                MAXEXTENTS       2147483645
                PCTINCREASE      0
               ))
/

ALTER TABLE at_transform_criteria ADD (
  CONSTRAINT at_transform_criteria_u02
 UNIQUE (resultant_ts_code)
    USING INDEX
    tablespace CWMS_20DATA
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64 k
                MINEXTENTS       1
                MAXEXTENTS       2147483645
                PCTINCREASE      0
               ))
/

ALTER TABLE at_transform_criteria ADD (
  CONSTRAINT at_transform_criteria_r02
 FOREIGN KEY (resultant_ts_code)
 REFERENCES at_cwms_ts_spec (ts_code))
/

ALTER TABLE at_transform_criteria ADD (
  CONSTRAINT at_transform_criteria_r01
 FOREIGN KEY (ts_code)
 REFERENCES at_cwms_ts_spec (ts_code))
/

ALTER TABLE at_transform_criteria ADD (
  CONSTRAINT at_transform_criteria_r03
 FOREIGN KEY (comp_vt_code)
 REFERENCES at_comp_vt (comp_vt_code))
/

-----------------------------
-- AT_UNIT_ALIAS TABLE.
--
CREATE TABLE at_unit_alias
(
  alias_id        VARCHAR2(32 BYTE)             NOT NULL,
  db_office_code  NUMBER                  NOT NULL,
  unit_code       NUMBER(10)                    NOT NULL
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          200 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING
/

-----------------------------
-- AT_UNIT_ALIAS TABLE comments
--
COMMENT ON TABLE at_unit_alias IS 'Contains unitAlias names for all units';
COMMENT ON COLUMN at_unit_alias.alias_id IS 'Alias name and primary key';
COMMENT ON COLUMN at_unit_alias.unit_code IS 'Foreign key referencing CWMS_UNIT table by its primary key';

-----------------------------
-- AT_UNIT_ALIAS TABLE indices
--
CREATE UNIQUE INDEX at_unit_alias_pk ON at_unit_alias
(alias_id, db_office_code)
LOGGING
tablespace CWMS_20DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

-----------------------------
-- AT_UNIT_ALIAS TABLE constraints
--
ALTER TABLE at_unit_alias ADD CONSTRAINT at_unit_alias_r02 FOREIGN KEY (db_office_code) REFERENCES cwms_office (office_code);
ALTER TABLE at_unit_alias ADD CONSTRAINT fk_at_unit_alias  FOREIGN KEY (unit_code) REFERENCES cwms_unit (unit_code);
ALTER TABLE at_unit_alias ADD CONSTRAINT at_unit_alias_pk  PRIMARY KEY (alias_id, db_office_code)
    USING INDEX
    tablespace CWMS_20DATA
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64 k
                MINEXTENTS       1
                MAXEXTENTS       2147483645
                PCTINCREASE      0
               )
/

-----------------------------
-- AT_USER_PREFERENCES TABLE.
--
CREATE TABLE at_user_preferences
(
  db_office_code           NUMBER,
  username                 VARCHAR2(31 BYTE),
  display_format_lat_long  VARCHAR2(3 BYTE),
  display_unit_system      VARCHAR2(2 BYTE)
)
tablespace CWMS_20DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING
/

CREATE UNIQUE INDEX at_user_preferences_pk ON at_user_preferences
(db_office_code, username)
LOGGING
tablespace CWMS_20DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

ALTER TABLE at_user_preferences ADD (
  CONSTRAINT at_user_preferences_pk
 PRIMARY KEY
 (db_office_code, username)
    USING INDEX
    tablespace CWMS_20DATA
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64 k
                MINEXTENTS       1
                MAXEXTENTS       2147483645
                PCTINCREASE      0
               ))
/
-----------------------------
-- AT_OFFICE_SETTINGS TABLE.
--
CREATE TABLE at_office_settings
(
  db_office_code           NUMBER,
  screening_use_otf        VARCHAR2(1 BYTE),
  screening_use_datchk     VARCHAR2(1 BYTE),
  screening_use_cwms       VARCHAR2(1 BYTE),
  max_northern_lat         NUMBER,
  max_southern_lat         NUMBER,
  max_western_long         NUMBER,
  max_eastern_long         NUMBER,
  display_lat_long_format  VARCHAR2(3 BYTE),
  display_unit_system      VARCHAR2(2 BYTE)
)
tablespace CWMS_20DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING
/

CREATE UNIQUE INDEX at_office_settings_pk ON at_office_settings
(db_office_code)
LOGGING
tablespace CWMS_20DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64 k
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL
/

ALTER TABLE at_office_settings ADD (
  CONSTRAINT at_office_settings_pk
 PRIMARY KEY
 (db_office_code)
    USING INDEX
    tablespace CWMS_20DATA
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64 k
                MINEXTENTS       1
                MAXEXTENTS       2147483645
                PCTINCREASE      0
               ))
/

---------------------------------
-- AT_PROPERTIES table.
-- 
CREATE TABLE at_properties
    (
        office_code    NUMBER(10),
        prop_category  VARCHAR2(256) NOT NULL,
        prop_id        VARCHAR2(256) NOT NULL,
        prop_value     VARCHAR2(256),
        prop_comment   VARCHAR2(256)
    )
	TABLESPACE CWMS_20AT_DATA
    LOGGING
    NOCOMPRESS
    NOCACHE
    NOPARALLEL
    NOMONITORING
/

COMMENT ON TABLE at_properties IS 'Generic properties, such as for Java application.';
COMMENT ON COLUMN at_properties.office_code   IS 'References the office that "owns" this property.';
COMMENT ON COLUMN at_properties.prop_category IS 'Major category or component to which property applies.';
COMMENT ON COLUMN at_properties.prop_id       IS 'Property name.';
COMMENT ON COLUMN at_properties.prop_value    IS 'Property value.';
COMMENT ON COLUMN at_properties.prop_comment  IS 'Notes about property usage or value.';
---------------------------------
-- AT_PROPERTIES constraints.
-- 
ALTER TABLE at_properties ADD CONSTRAINT at_properties_fk FOREIGN KEY(office_code)REFERENCES cwms_office (office_code);
ALTER TABLE at_properties ADD CONSTRAINT at_properties_pk PRIMARY KEY(office_code, prop_category, prop_id);

---------------------------------
-- AT_PROPERTIES indices.
-- 
CREATE UNIQUE INDEX at_properties_uk1 ON at_properties(office_code, UPPER("PROP_CATEGORY"), UPPER("PROP_ID"));

---------------------------------
-- AT_PROPERTIES default data.
-- 
INSERT INTO at_properties values(
	(SELECT office_code FROM cwms_office WHERE office_id = 'CWMS'),
	'CWMSDB',
	'logging.table.max_entries',
	'100000',
	'Max number of rows to keep when trimming log.');
	
INSERT INTO at_properties values(
	(SELECT office_code FROM cwms_office WHERE office_id = 'CWMS'),
	'CWMSDB',
	'logging.entry.max_age',
	'120',
	'Max entry age in days to keep when trimming log.');
	
INSERT INTO at_properties values(
	(SELECT office_code FROM cwms_office WHERE office_id = 'CWMS'),
	'CWMSDB',
	'logging.auto_trim.interval',
	'240',
	'Interval in minutes for job TRIM_LOG_JOB to execute.');

-----------------------------
-- AT_REPORT_TEMPLATES table
--
CREATE TABLE at_report_templates
(
  ID               VARCHAR2(256 BYTE),
  description      VARCHAR2(256 BYTE),
  header_template  VARCHAR2(4000 BYTE),
  record_template  VARCHAR2(4000 BYTE),
  footer_template  VARCHAR2(4000 BYTE)
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE
(
  INITIAL          64 k
  MINEXTENTS       1
  MAXEXTENTS       2147483645
  PCTINCREASE      0
  BUFFER_POOL      DEFAULT
)
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING
/

-----------------------------
-- AT_REPORT_TEMPLATES comments
--
COMMENT ON TABLE  at_report_templates                 IS 'Defines canned templates for use with CWMS_REPORT.TEXT_REPORT';
COMMENT ON COLUMN at_report_templates.ID              IS 'Unique record identifier, using hierarchical /dir/subdir/.../file syntax';
COMMENT ON COLUMN at_report_templates.description     IS 'Description of this set of templates';
COMMENT ON COLUMN at_report_templates.header_template IS 'A template string for the portion of the report before the records';
COMMENT ON COLUMN at_report_templates.record_template IS 'A template string applied to each record in the report';
COMMENT ON COLUMN at_report_templates.footer_template IS 'A template string for the portion of the report after the records';

-----------------------------
-- AT_REPORT_TEMPLATES indices
--
ALTER TABLE at_report_templates ADD
(
  PRIMARY KEY (ID)
  USING INDEX
  TABLESPACE CWMS_20AT_DATA
  PCTFREE    10
  INITRANS   2
  MAXTRANS   255
  STORAGE
  (
    INITIAL          64 k
    MINEXTENTS       1
    MAXEXTENTS       2147483645
    PCTINCREASE      0
  )
)
/

-----------------------------
-- AT_REPORT_TEMPLATES default data
--
INSERT INTO at_report_templates
     VALUES ('/cat_ts_table/xml', 'Generates XML from cat_ts_table records',
             '<?xml version="1.0"?>\n<tsid_catalog>\n',
             '  <tsid office="$1" ts_code="$4" offset="$3">$2</tsid>\n',
             '</tsid_catalog>\n');

INSERT INTO at_report_templates
     VALUES ('/cat_ts_table/html', 'Generates HTML from cat_ts_table records',
             '<html>
<head>
  <title>Time Series IDs</title>
</head>
<body>
  <center>
    <h2>Time Series IDs</h2>
    <hr/>
    <table border="1">
      <tr>
        <th>Time Series Identifier</th>
        <th>TS Code</th>
        <th>UTC Interval Offset</th>
      </tr>
',
             '      <tr>
        <td>$2</td>
        <td>$4</td>
        <td>$3</td>
      </tr>
',
             '    </table>
  </center>
</body>
</html>
'           );

INSERT INTO at_report_templates
     VALUES ('/cat_ts_table/text', 'Generates text from cat_ts_table records',
             '\nTIME SERIES CATALOG\nREPORT GENERATED BY $host AT $time\n\n',
             '$1%-8.8s$4%-8d$3%12d$2\n', '\n$count TOTAL RECORDS PROCESSED\n');

COMMIT ;

-----------------------------
-- AT_CLOB table
--
CREATE TABLE at_clob
(
  CLOB_CODE    NUMBER(10) NOT NULL,
  OFFICE_CODE  NUMBER(10) NOT NULL,
  ID           VARCHAR2(256 BYTE) NOT NULL,
  description  VARCHAR2(256 BYTE),
  VALUE        CLOB
)
TABLESPACE CWMS_20AT_DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE
(
  INITIAL          64 k
  MINEXTENTS       1
  MAXEXTENTS       2147483645
  PCTINCREASE      0
  BUFFER_POOL      DEFAULT
)
LOGGING
NOCOMPRESS
LOB (VALUE) STORE AS
(
  TABLESPACE  CWMS_20AT_DATA
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  PCTVERSION  0
  NOCACHE
  STORAGE
  (
    INITIAL          64 k
    MINEXTENTS       1
    MAXEXTENTS       2147483645
    PCTINCREASE      0
    BUFFER_POOL      DEFAULT
  )
)
NOCACHE
NOPARALLEL
MONITORING
/

-----------------------------
-- AT_CLOB comments
--
COMMENT ON TABLE  at_clob             IS 'Character Large OBject Storage for CWMS';
COMMENT ON COLUMN at_clob.CLOB_CODE   IS 'Unique reference code for this CLOB';
COMMENT ON COLUMN at_clob.OFFICE_CODE IS 'Reference to CWMS office';
COMMENT ON COLUMN at_clob.ID          IS 'Unique record identifier, using hierarchical /dir/subdir/.../file syntax';
COMMENT ON COLUMN at_clob.description IS 'Description of this CLOB';
COMMENT ON COLUMN at_clob.VALUE       IS 'The CLOB data';

-----------------------------
-- AT_CLOB indices
--
ALTER TABLE at_clob ADD
(
  PRIMARY KEY (CLOB_CODE)
  USING INDEX
  TABLESPACE CWMS_20AT_DATA
  PCTFREE    10
  INITRANS   2
  MAXTRANS   255
  STORAGE
  (
    INITIAL          64 k
    MINEXTENTS       1
    MAXEXTENTS       2147483645
    PCTINCREASE      0
  )
)
/

-----------------------------
-- AT_CLOB constraints
--
ALTER TABLE AT_CLOB ADD CONSTRAINT AT_CLOB_U1  UNIQUE (OFFICE_CODE, ID) USING INDEX;
ALTER TABLE AT_CLOB ADD CONSTRAINT AT_CLOB_FK1 FOREIGN KEY (OFFICE_CODE) REFERENCES CWMS_OFFICE (OFFICE_CODE);
ALTER TABLE AT_CLOB ADD CONSTRAINT AT_CLOB_CK1 CHECK (SUBSTR(ID, 1, 1) = '/');
ALTER TABLE AT_CLOB ADD CONSTRAINT AT_CLOB_CK2 CHECK (UPPER(ID) = ID);

SET define off
-----------------------------
-- AT_CLOB default data
--
INSERT INTO at_clob
     VALUES (1,
             (SELECT OFFICE_CODE FROM CWMS_OFFICE WHERE OFFICE_ID = 'CWMS'),
             '/XSLT/IDENTITY',
             'Transforms the input to an identical copy of itself',
             '<!-- The Identity Transformation -->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <!-- Whenevery you match any node or any attribute -->
  <xsl:template match="node()|@*">
    <!-- Copy the current node -->
    <xsl:copy>
      <!-- Including and attributes it has and any child nodes -->
      <xsl:apply-templates select="@*|node()"/>
    </xsl:copy>
  </xsl:template>
</xsl:stylesheet>
'           );

INSERT INTO at_clob
     VALUES (2,
             (SELECT OFFICE_CODE FROM CWMS_OFFICE WHERE OFFICE_ID = 'CWMS'),
             '/XSLT/CAT_TS_XML/TABBED_TEXT',
             'Transforms cat_ts_xml output to tab-separated text',
             '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:template match="/tsid_catalog[1]">
    <xsl:text>Time Series IDs for Office "</xsl:text>
    <xsl:value-of select="/tsid_catalog[1]/@office"/>
    <xsl:text>" Matching "</xsl:text>
    <xsl:value-of select="/tsid_catalog[1]/@pattern"/>
    <xsl:text>"&#xA;&#xA;Time Series ID&#x9;TS CODE&#x9;UTC OFFSET"&#xA;</xsl:text>
    <xsl:for-each select="/tsid_catalog/tsid">
      <xsl:value-of select="."/>
      <xsl:text>&#x9;</xsl:text>
      <xsl:value-of select="@ts_code"/>
      <xsl:text>&#x9;</xsl:text>
      <xsl:value-of select="@offset"/>
      <xsl:text>&#xA;</xsl:text>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
'           );

INSERT INTO at_clob
     VALUES (3,
             (SELECT OFFICE_CODE FROM CWMS_OFFICE WHERE OFFICE_ID = 'CWMS'),
             '/XSLT/CAT_TS_XML/HTML',
             'Transforms cat_ts_xml output to html',
             '<html xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<head>
  <title>Time Series IDs for Office "<xsl:value-of select="/tsid_catalog[1]/@office"/>"
         Matching "<xsl:value-of select="/tsid_catalog[1]/@pattern"/>"
  </title>
</head>
<body>
  <center>
    <h2>
      Time series IDs matching pattern
	    "<xsl:value-of select="/tsid_catalog[1]/@pattern"/>" for Office
	    "<xsl:value-of select="/tsid_catalog[1]/@office"/>".
    </h2>
    <hr/>
    <table border="1">
      <tr>
        <th>Time Series Identifier</th>
        <th>TS Code</th>
        <th>UTC Interval Offset</th>
      </tr>
      <xsl:for-each select="/tsid_catalog/tsid">
      <tr>
        <td><xsl:value-of select="."/></td>
        <td><xsl:value-of select="@ts_code"/></td>
        <td><xsl:value-of select="@offset"/></td>
      </tr>
      </xsl:for-each>
    </table>
  </center>
</body>
</html>
'           );

COMMIT ;
SET define on

SHOW ERRORS;
COMMIT ;
