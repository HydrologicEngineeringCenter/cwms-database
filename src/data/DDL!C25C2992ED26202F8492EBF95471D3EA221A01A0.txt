
  CREATE OR REPLACE TYPE "CWMS_20"."LOCATION_LEVEL_T" 
/**
 * Holds a location level.  A location level combines a location, parameter, parameter type,
 * duration, and specified level to describe a named level that can be compared against values
 * to determine status conditions. Location levels contain up to five indicators that may
 * be set during such a comparison. Location levels also have optional attribute values
 * that make them suitable for describing guide curves/rule curves
 *
 * @see type seasonal_value_tab_t
 * @see type loc_lvl_indicator_tab_t
 * @see type location_level_tab_t
 *
 * @member office_id                   The office that owns the location and specified level
 * @member location_id                 The location component of the location level
 * @member parameter_id                The parameter component of the location level
 * @member parameter_type_id           The parameter type component of the location level
 * @member duration_id                 The duration component of the location level
 * @member specified_level_id          The specified level component of the location level
 * @member level_date                  The effective date of the location level
 * @member level_value                 The value of the location level if it is a constant value (not recurring pattern or time series)
 * @member level_units_id              The unit used for the constant or varying location level value
 * @member level_comment               A comment about the location level
 * @member attribute_parameter_id      The parameter component of the location level attribute, if any
 * @member attribute_parameter_type_id The parameter type component of the location level attribute, if any
 * @member attribute_duration_id       The duration component of the location level attribute, if any
 * @member attribute_value             The value of the location level attribute, if any
 * @member attribute_units_id          The unit of the location level attribute value, if any
 * @member attribute_comment           A comment about the location level attribute
 * @member interval_origin             The start time of any of the recurring intervals if the location level is a recurring pattern of values
 * @member interval_months             The recurring interval duration if the location level is a recurring pattern and is described in units of months and/or years
 * @member interval_minutes            The recurring interval duration if the location level is a recurring pattern and is described in units of days or less
 * @member interpolate                 A flag ('T' or 'F') specifying whether to interpolate for level values at offsets between the specified offsets into the interval
 * @member seasonal_values             The values of the location level if it is a recurring pattern of values (not constant value or time series)
 * @member tsid                        The time series identifier representing the location level if it is a time series (not constant value or recurring pattern)
 * @member indicators                  The location level indicators associated with this location level
 */
is object (
   office_id                   varchar2(16),
   location_id                 varchar2(49),
   parameter_id                varchar2(49),
   parameter_type_id           varchar2(16),
   duration_id                 varchar2(16),
   specified_level_id          varchar2(256),
   level_date                  date,
   level_value                 number,
   level_units_id              varchar2(16),
   level_comment               varchar2(256),
   attribute_parameter_id      varchar2(49),
   attribute_parameter_type_id varchar2(16),
   attribute_duration_id       varchar2(16),
   attribute_value             number,
   attribute_units_id          varchar2(16),
   attribute_comment           varchar2(256),
   interval_origin             date,
   interval_months             integer,
   interval_minutes            integer,
   interpolate                 varchar2(1),
   tsid                        varchar2(183),
   seasonal_values             seasonal_value_tab_t,
   indicators                  loc_lvl_indicator_tab_t,
   -- not documented
   constructor function location_level_t(
      p_obj zlocation_level_t)
      return self as result,
   -- not documented
   constructor function location_level_t
      return self as result,
   -- not documented
   member function zlocation_level
      return zlocation_level_t,
   /**
    * Stores the location level to the database
    */
   member procedure store
);
CREATE OR REPLACE TYPE BODY "CWMS_20"."LOCATION_LEVEL_T" 
as

   constructor function location_level_t(
      p_obj zlocation_level_t)
      return self as result
   is
   begin
      select o.office_id,
             bl.base_location_id
             || substr('-', 1, length(pl.sub_location_id))
             || pl.sub_location_id
        into self.office_id,
             self.location_id
        from at_physical_location pl,
             at_base_location bl,
             cwms_office o
       where pl.location_code = p_obj.location_code
         and bl.base_location_code = pl.base_location_code
         and o.office_code = bl.db_office_code;

      select bp.base_parameter_id
             || substr('-', 1, length(p.sub_parameter_id))
             || p.sub_parameter_id
        into self.parameter_id
        from at_parameter p,
             cwms_base_parameter bp
       where p.parameter_code = p_obj.parameter_code
         and bp.base_parameter_code = p.base_parameter_code;

      select parameter_type_id
        into self.parameter_type_id
        from cwms_parameter_type
       where parameter_type_code = p_obj.parameter_type_code;

      select duration_id
        into self.duration_id
        from cwms_duration
       where duration_code = p_obj.duration_code;

      select specified_level_id
        into self.specified_level_id
        from at_specified_level
       where specified_level_code = p_obj.specified_level_code;

      self.level_date := p_obj.location_level_date;
      self.level_value := p_obj.location_level_value;
      self.level_units_id := cwms_util.get_default_units(parameter_id);

      if p_obj.attribute_parameter_code is not null then
         select bp.base_parameter_id
                || substr('-', 1, length(p.sub_parameter_id))
                || p.sub_parameter_id
           into self.attribute_parameter_id
           from at_parameter p,
                cwms_base_parameter bp
          where p.parameter_code = p_obj.attribute_parameter_code
            and bp.base_parameter_code = p.base_parameter_code;

         select parameter_type_id
           into self.attribute_parameter_type_id
           from cwms_parameter_type
          where parameter_type_code = p_obj.attribute_param_type_code;

         select duration_id
           into self.attribute_duration_id
           from cwms_duration
          where duration_code = p_obj.attribute_duration_code;
         attribute_value := p_obj.attribute_value;
         level_units_id := cwms_util.get_default_units(attribute_parameter_id);

         attribute_comment := p_obj.attribute_comment;
      end if;

      self.interval_origin  := p_obj.interval_origin;
      self.interval_months  := cwms_util.yminterval_to_months(p_obj.calendar_interval);
      self.interval_minutes := cwms_util.dsinterval_to_minutes(p_obj.time_interval);
      self.interpolate      := p_obj.interpolate;
      self.tsid             := case p_obj.ts_code is null
                                  when true  then null
                                  when false then cwms_ts.get_ts_id(p_obj.ts_code)
                               end;
      if p_obj.seasonal_level_values is not null then
         self.seasonal_values := new seasonal_value_tab_t();
         for i in 1..p_obj.seasonal_level_values.count loop
            self.seasonal_values.extend;
            self.seasonal_values(i) := seasonal_value_t(
               p_obj.seasonal_level_values(i).calendar_offset,
               p_obj.seasonal_level_values(i).time_offset,
               p_obj.seasonal_level_values(i).level_value);
         end loop;
      end if;
      self.indicators := p_obj.indicators;
      return;
   end location_level_t;

 constructor function location_level_t
      return self as result
   is
   begin
      --------------------------
      -- all members are null --
      --------------------------
      return;
   end;

   member function zlocation_level
      return zlocation_level_t
   is
      l_office_code                   number(10);
      l_cwms_office_code              number(10) := cwms_util.get_office_code('CWMS');
      l_location_level_code           number(10);
      l_location_code                 number(10);
      l_specified_level_code          number(10);
      l_parameter_code                number(10);
      l_parameter_type_code           number(10);
      l_duration_code                 number(10);
      l_location_level_value          number;
      l_attribute_value               number;
      l_attribute_parameter_code      number(10);
      l_attribute_param_type_code     number(10);
      l_attribute_duration_code       number(10);
      l_calendar_interval             interval year(2) to month;
      l_time_interval                 interval day(3) to second(0);
      l_seasonal_level_values         seasonal_loc_lvl_tab_t;
      l_obj                           zlocation_level_t;
      l_parameter_type_id             parameter_type_id%type := parameter_type_id;
      l_duration_id                   duration_id%type := duration_id;
      l_specified_level_id            specified_level_id%type := specified_level_id;

   begin
      select o.office_code,
             pl.location_code
        into l_office_code,
             l_location_code
        from at_physical_location pl,
             at_base_location bl,
             cwms_office o
       where upper(o.office_id) = upper(self.office_id)
         and bl.db_office_code = o.office_code
         and bl.base_location_code = pl.base_location_code
         and upper(bl.base_location_id) = upper(cwms_util.get_base_id(self.location_id))
         and upper(nvl(pl.sub_location_id, '.')) = upper(nvl(cwms_util.get_sub_id(self.location_id), '.'));

      select p.parameter_code
        into l_parameter_code
        from at_parameter p,
             cwms_base_parameter bp
       where upper(bp.base_parameter_id) = upper(cwms_util.get_base_id(self.parameter_id))
         and p.base_parameter_code = bp.base_parameter_code
         and upper(nvl(p.sub_parameter_id, '.')) = upper(nvl(cwms_util.get_sub_id(self.parameter_id), '.'))
         and p.db_office_code in (l_office_code, l_cwms_office_code);

      select pt.parameter_type_code
        into l_parameter_type_code
        from cwms_parameter_type pt
       where upper(pt.parameter_type_id) = upper(l_parameter_type_id);

      select d.duration_code
        into l_duration_code
        from cwms_duration d
       where upper(d.duration_id) = upper(l_duration_id);

      select sl.specified_level_code
        into l_specified_level_code
        from at_specified_level sl
       where upper(sl.specified_level_id) = upper(l_specified_level_id);

      select level_value * factor + offset
        into l_location_level_value
        from cwms_unit_conversion cuc
       where from_unit_id = self.level_units_id
         and to_unit_id = cwms_util.get_default_units(self.parameter_id);

      if self.attribute_parameter_id is not null then
         select p.parameter_code
           into l_attribute_parameter_code
           from at_parameter p,
                cwms_base_parameter bp
          where upper(bp.base_parameter_id) = upper(cwms_util.get_base_id(self.attribute_parameter_id))
            and p.base_parameter_code = bp.base_parameter_code
            and upper(nvl(p.sub_parameter_id, '.')) = upper(nvl(cwms_util.get_sub_id(self.attribute_parameter_id), '.'))
            and p.db_office_code in (l_office_code, l_cwms_office_code);

         select pt.parameter_type_code
           into l_attribute_param_type_code
           from cwms_parameter_type pt
          where upper(pt.parameter_type_id) = upper(self.attribute_parameter_type_id);

         select d.duration_code
           into l_attribute_duration_code
           from cwms_duration d
          where upper(d.duration_id) = upper(self.attribute_duration_id);

         select self.attribute_value * factor + offset
           into l_attribute_value
           from cwms_unit_conversion cuc
          where from_unit_id = attribute_units_id
            and to_unit_id = cwms_util.get_default_units(self.attribute_parameter_id);
      end if;

      l_calendar_interval := cwms_util.months_to_yminterval(self.interval_months);
      l_time_interval     := cwms_util.minutes_to_dsinterval(self.interval_minutes);

      if self.seasonal_values is not null then
         l_seasonal_level_values := new seasonal_loc_lvl_tab_t();
         for i in 1..self.seasonal_values.count loop
            l_seasonal_level_values.extend;
            l_seasonal_level_values(i) := seasonal_location_level_t(
               cwms_util.months_to_yminterval(self.seasonal_values(i).offset_months),
               cwms_util.minutes_to_dsinterval(self.seasonal_values(i).offset_minutes),
               seasonal_values(i).value);
         end loop;
      end if;

      begin
         select location_level_code
           into l_location_level_code
           from at_location_level
          where location_code = l_location_code
            and parameter_code = l_parameter_code
            and parameter_type_code = l_parameter_type_code
            and duration_code = l_duration_code
            and specified_level_code = l_specified_level_code
            and location_level_date = self.level_date
            and location_level_value = l_location_level_value
            and nvl(to_char(attribute_value), '@') = nvl(to_char(l_attribute_value), '@')
            and nvl(attribute_parameter_code, -1) = nvl(l_attribute_parameter_code, -1)
            and nvl(attribute_parameter_type_code, -1) = nvl(l_attribute_param_type_code, -1)
            and nvl(attribute_duration_code, -1) = nvl(l_attribute_duration_code, -1);
      exception
         when no_data_found then null;
      end;
      if l_location_level_code is null then
         l_obj := zlocation_level_t();
         l_obj.init(
            cwms_seq.nextval,
            l_location_code,
            l_specified_level_code,
            l_parameter_code,
            l_parameter_type_code,
            l_duration_code,
            self.level_date,
            l_location_level_value,
            self.level_comment,
            l_attribute_value,
            l_attribute_parameter_code,
            l_attribute_param_type_code,
            l_attribute_duration_code,
            self.attribute_comment,
            self.interval_origin,
            l_calendar_interval,
            l_time_interval,
            self.interpolate,
            case self.tsid is null
               when true  then null
               when false then cwms_ts.get_ts_code(self.tsid, l_office_code)
            end,
            l_seasonal_level_values,
            self.indicators);
      else
         l_obj := zlocation_level_t(l_location_level_code);
      end if;
      return l_obj;
   end zlocation_level;

   member procedure store
   is
      l_obj zlocation_level_t;
   begin
      l_obj:= zlocation_level;
      l_obj.store;
   end store;
end;
 
  GRANT EXECUTE ON "CWMS_20"."LOCATION_LEVEL_T" TO "CWMS_USER"
 