<project name="cwms_database_schema" default="all" xmlns:resolver="antlib:org.apache.maven.resolver.ant">
	<taskdef uri="antlib:org.apache.maven.resolver.ant" resource="org/apache/maven/resolver/ant/antlib.xml"
    classpath="lib/maven-resolver-ant-tasks-1.2.1-uber.jar" />	
	
	<description>
		Build, Deployment, and Installation file for the CWMS Database
	</description>

	
	

	<resolver:pom id="pom" file="pom.xml" />
	

	<!-- read in the environment for use in properties -->
	<property environment="env"/>

	<!-- set file locations for this build -->
	<property name="root"  location="."/>
	<property name="src" location="${root}/src"/>
	<property name="lib"  location="${root}/lib"/>
	<property name="test"  location="${root}/test"/>
	<property name="build.dir" location="${root}/build"/>
	<property name="coverage.dir" location="${build.dir}/coverage"/>


	<resolver:localrepo dir="${build.dir}/repo"/>
	<resolver:remoterepo id="hec-nexus-snapshots" url="https://www.hec.usace.army.mil/nexus/repository/cwms-snapshots" type="default" releases="false" snapshots="true" />
	<resolver:remoterepo id="hec-nexus-releases" url="https://www.hec.usace.army.mil/nexus/repository/cwms-releases" type="default" releases="true" snapshots="false" />

	<resolver:remoterepos id="resolver.repositories">
		<resolver:remoterepo refid="nexus-snapshots" />
		<resolver:remoterepo refid="nexus-release" />
	</resolver:remoterepos>

	<!-- Load in the ant-contrib jar to use the foreach external task -->	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${root}/lib/ant-contrib.jar"/>
		</classpath>
	</taskdef>	

	<import optional="true" file="${root}/${env.USERNAME}.xml"/>
	<import optional="true" file="${builduser.overrides}"/>
	
	<property name="output.lines" value="1000"/>
	
	<!-- whether or not this build is a debug build -->
	<property name="debug"  value="true"/>

	<!-- the amount of memory to allocate to javac during compile -->
	<property name="memMax" value="1024m"/>

	<!-- flag to create the test account -->
	<property name="test.account.create" value="-testaccount"/>
	<property name="seq.start" value=""/>

        <!-- Existing CWMS instances at current office (used to determine CWMS_SEQ offset) -->
        <property name="cwms.existing.instances" value="0"/>


	<!-- flags to control output of auto kill and auto build -->
	<property name="autobuild.echo" value="OFF"/>
	<property name="autokill.echo" value="OFF"/>

	<!-- flags to force the kill script to ignore errors. -->
	<property name="autokill.force" value="-force"/>
		

	<!-- Initialize the project for building. -->
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- TODO: consider pulling this from TeamCity -->
		<property name="wcdba.build" value="WCDBA:Build:${DSTAMP}:${TSTAMP}"/>
		
		
		<mkdir dir="${build.dir}/deps"/> <!-- create the directory for output -->
		<mkdir dir="${coverage.dir}"/>
	</target>


	
	<!-- Executes python scripts to build the CWMS schema. -->
	<target name="build" description="Executes python scripts to build the CWMS schema" depends="init">		
		
		<echo message="Build sql scripts..."/>
		
		<if>
			<equals arg1="${office.secondary.id}" arg2="" />
			<then>
				<property name="buildSqlScript-arg-line" value="/c python buildSqlScripts.py ${oracle.cwms.user} ${cwms.existing.instances} ${office.primary.id} ${test.account.create} ${seq.start}"/>
				<echo message="${buildSqlScript-arg-line}"/>
			</then>
			<else>
				<property name="buildSqlScript-arg-line" value="/c python buildSqlScripts.py ${oracle.cwms.user} ${cwms.existing.instances} ${office.primary.id} ${office.secondary.id} ${test.account.create} ${seq.start}"/>
				<echo message="${buildSqlScript-arg-line}"/>
			</else>
		</if>
		
		<exec dir="${src}" executable="cmd" output="build-sql-script-output.txt" error="build-sql-script-error.txt" resultproperty="build-sql-script-result">
			<arg line="${buildSqlScript-arg-line}"/>
		</exec>
		
		<if>
			<equals arg1="${build-sql-script-result}" arg2="0" />
			<then>
				<echo message="Finished building sql scripts"/>
			</then>
			<else>
				<concat>
					<filelist dir="${root}" files="build-sql-script-output.txt,build-sql-script-error.txt"/>
				</concat>				
				<echo message="${build-sql-script-result}"/>
				<fail/>
			</else>
		</if>
		
		<echo message="Finished building sql scripts"/>
		
		<echo message="Creating new CWMS Schema..."/>

		<property name="autobuild-arg-line" value="/c python autobuild.py echo=${autobuild.echo} inst=${oracle.cwms.instance} sys_passwd=${oracle.sys.password} cwms_schema=${oracle.cwms.user} cwms_passwd=${oracle.cwms.password} dbi_passwd=${oracle.cwmsdbi.password} pd_office=${office.primary.id} pd_passwd=${oracle.cwmspd.password} test_passwd=${oracle.hectest.password} ${build.restricted}"/>
		<echo message="${autobuild-arg-line}"/>
		
		<exec dir="${src}" executable="cmd" output="auto-build-output.txt" error="auto-build-error.txt" resultproperty="auto-build-result">
			<arg line="${autobuild-arg-line}"/>
		</exec>
		
		<if>
			<equals arg1="${auto-build-result}" arg2="0" />
			<then>
				<echo message="Finished creating new CWMS Schema"/>
			</then>
			<else>
				<!-- concat last 1000 lines of std output -->
				<concat>
					<filelist dir="${root}" files="auto-build-output.txt"/>
					<filterchain>
						<filterreader classname="org.apache.tools.ant.filters.TailFilter">
							<param name="lines" value="${output.lines}"/>
						</filterreader>
					</filterchain>			
				</concat>
				<!-- concat all of std error -->
				<concat>
					<filelist dir="${root}" files="auto-build-error.txt"/>
				</concat>
				<echo message="${auto-build-result}"/>
				<fail/>
			</else>
		</if>

	</target>
		

	<target name="setup-tests" depends="init" description="Install the test framework into the oracle database">
		<echo message="setting up test framework tests." />
		<if>			
			<available file="build/deps/utPLSQL.zip"/>
			<then>
				<!-- have already downloaded -->			
			</then>
			<else>
				<get dest="build/deps">
					<url url="https://github.com/utPLSQL/utPLSQL/releases/download/v3.1.10/utPLSQL.zip"/>
				</get>
				<unzip src="build/deps/utPLSQL.zip" dest="build/deps/" />
			</else>			
		</if>        
		<echo message="   Installing test framework into database" />
		<exec dir="build/deps/utPLSQL/source" executable="sqlplus" output="${build.dir}/tests.log" append="true">
			<arg value="sys/${oracle.sys.password}@${oracle.cwms.instance} as sysdba" />
			<arg value="@install_headless_with_trigger.sql" />
		</exec>
		<echo message="     Tweaking privileges for UT3 user"/>
        <exec executable="sqlplus" output="${build.dir}/tests.log" append="true">
			<arg value="sys/${oracle.sys.password}@${oracle.cwms.instance} as sysdba" />
            <redirector inputstring="GRANT INHERIT PRIVILEGES ON USER sys TO ut3;"/>
        </exec>
		
	</target>

	<target name="tests-install" description="Install all of the test code and set the right grants" depends="init">
		<echo message="    loading test code" />
        <exec dir="src/test" executable="sqlplus">
			<arg value="${oracle.cwms.user}/${oracle.cwms.password}@${oracle.cwms.instance}" />
            <arg value="@tests.sql"/>
			<arg value="${office.primary.id}"/>
        </exec>		
		<exec dir="src/test" executable="sqlplus">
			<arg value="sys/${oracle.sys.password}@${oracle.cwms.instance} as sysdba"/>
			<arg value="@test_grants.sql"/>
		</exec>
	</target>

	<target name="test" depends="setup-tests,tests-install" description="run all tests." >		
		<antcall target="test-as_pd_user"/>		
		<!-- we will then merge all of the test output and code coverage-->

		<!-- create coverage zip for TeamCity-->
		<zip destfile="${build.dir}/coverage.zip" basedir="${coverage.dir}" includes="**"/>
	</target>


    <target name="test-as_pd_user" description="run tests that require connecting with a PD user">   
        <if>
            <available file="build/tests.log"/>
            <then></then>
            <else><antcall target="setup-tests"/></else>
        </if>
        
        <echo message="    Running tests" />
        <exec executable="utplsql" resultproperty="utreturn">
            <arg value="run"/>
			<arg value="-p=cwms_20"/>		
            <arg value="-f"/><arg value="UT_COVERAGE_HTML_REPORTER"/><arg value="-o"/><arg value="${coverage.dir}/index.html" />
            <arg value="-f"/><arg value="UT_COVERAGE_COBERTURA_REPORTER"/><arg value="-o"/><arg value="${coverage.dir}/coverage.xml" />
            <arg value="-f"/><arg value="UT_JUNIT_REPORTER"/><arg value="-o"/><arg value="build/tests.xml" />
			<arg value="-f"/><arg value="UT_DOCUMENTATION_REPORTER"/>
            <arg value="-d"/>
			<arg value="pd_user/pd_pw@${oracle.cwms.instance}" />
            
        </exec>

		<fail>
			<condition>
				<not>
					<equals arg1="0" arg2="${utreturn}"/>
				</not>
			</condition>
		</fail>

    </target>


    <target name="destroy-tests">
		<echo message="    Removing test framework"/>
		<exec dir="build/deps/utPLSQL/source" executable="sqlplus">
			<arg value="sys/${oracle.sys.password}@${oracle.cwms.instance} as sysdba" />
			<redirector inputstring="drop user ut3 cascade;">
				
			</redirector>
		</exec>
        <delete file="build/test.log"/>

    </target>





	<target name="tail-test">
		<concat>
			<filelist dir="${root}" files="auto-build-output.txt"/>
			<filterchain>
				<filterreader classname="org.apache.tools.ant.filters.TailFilter">
					<param name="lines" value="${output.lines}"/>
				</filterreader>
			</filterchain>			
		</concat>
	</target>
	
	<!-- Executes python script to drop the CWMS schema. -->
	<target name="clean" description="Executes python script to drop the CWMS schema">
		
		<echo message="dropping existing CWMS Schema..."/>
		
		<property name="autokill-arg-line" value="/c python autokill.py echo=${autokill.echo} inst=${oracle.cwms.instance} sys_passwd=${oracle.sys.password} cwms_schema=${oracle.cwms.user} ${autokill.force} ${build.restricted}"/>
		<echo message="${autokill-arg-line}"/>
		
		<exec dir="${src}" executable="cmd" output="auto-kill-output.txt" error="auto-kill-error.txt" resultproperty="auto-kill-result">
			<arg line="${autokill-arg-line}"/>
		</exec>	
		
		<if>
			<equals arg1="${auto-kill-result}" arg2="0" />
			<then>
				<echo message="Finished dropping existing CWMS Schema"/>
			</then>
			<else>
				<concat>
					<filelist dir="${root}" files="auto-kill-output.txt,auto-kill-error.txt"/>
				</concat>				
				<echo message="${auto-kill-result}"/>
				<fail/>
			</else>
		</if>
	
    </target>
	
	<!-- Loads rowcps schema. -->
	<target name="load-rowcps-schema" description="Loads rowcps schema">
		
		<echo message="Loading rowcps Schema..."/>
		
		<property name="rowcpsLoad-arg-line" value="${oracle.cwms.user}/${oracle.cwms.password}@${oracle.cwms.instance} @rowcps_schema"/>
		<echo message="${rowcpsLoad-arg-line}"/>
		
		<exec dir="${src}/rowcps" executable="sqlplus" output="rowcps-load-output.txt" error="rowcps-load-error.txt" resultproperty="rowcps-load-result">
			<arg line="${rowcpsLoad-arg-line}"/>
		</exec>	
		
		<if>
			<equals arg1="${rowcps-load-result}" arg2="0" />
			<then>
				<echo message="Finished Loading existing rowcps Schema"/>
			</then>
			<else>
				<concat>
					<filelist dir="${root}" files="rowcps-load-output.txt,rowcps-load-error.txt"/>
				</concat>				
				<echo message="${rowcps-load-result}"/>
				<fail/>
			</else>
		</if>
	
	</target>
	
	<target name = "load-rowcps-api">
		<echo message="Loading rowcps Types..."/>
		
		<property name="rowcpsLoadTypes-arg-line" value="${oracle.cwms.user}/${oracle.cwms.password}@${oracle.cwms.instance} @rowcps_types"/>
		<echo message="${rowcpsLoadTypes-arg-line}"/>
		
		<exec dir="${src}/rowcps" executable="sqlplus" output="rowcps-types-load-output.txt" error="rowcps-types-load-error.txt" resultproperty="rowcps-types-load-result">
			<arg line="${rowcpsLoadTypes-arg-line}"/>
		</exec>	
		
		<if>
			<equals arg1="${rowcps-types-load-result}" arg2="0" />
			<then>
				<echo message="Finished Loading existing rowcps Types"/>
			</then>
			<else>
				<concat>
					<filelist dir="${root}" files="rowcps-types-load-output.txt,rowcps-types-load-error.txt"/>
				</concat>				
				<echo message="${rowcps-types-load-result}"/>
				<fail/>
			</else>
		</if>
		
		<echo message="Loading CWMS project Package..."/>
		
		<property name="rowcpsLoadCWMSProjectPkg-arg-line" value="${oracle.cwms.user}/${oracle.cwms.password}@${oracle.cwms.instance} @cwms_project_pkg"/>
		<echo message="${rowcpsLoadCWMSProjectPkg-arg-line}"/>
		
		<exec dir="${src}/rowcps" executable="sqlplus" output="rowcps-load-CWMS-Project-Pkg-output.txt" error="rowcps-load-CWMS-Project-Pkg-error.txt" resultproperty="rowcps-load-CWMS-Project-Pkg-result">
			<arg line="${rowcpsLoadCWMSProjectPkg-arg-line}"/>
		</exec>	
		
		<if>
			<equals arg1="${rowcps-load-CWMS-Project-Pkg-result}" arg2="0" />
			<then>
				<echo message="Finished Loading CWMS project Package"/>
			</then>
			<else>
				<concat>
					<filelist dir="${root}" files="rowcps-load-CWMS-Project-Pkg-output.txt,rowcps-load-CWMS-Project-Pkg-error.txt"/>
				</concat>				
				<echo message="${rowcps-load-CWMS-Project-Pkg-result}"/>
				<fail/>
			</else>
		</if>
		
		<echo message="Loading CWMS project Package Body..."/>
		
		<property name="rowcpsLoadCWMSProjectPkgBody-arg-line" value="${oracle.cwms.user}/${oracle.cwms.password}@${oracle.cwms.instance} @cwms_project_pkg_body"/>
		<echo message="${rowcpsLoadCWMSProjectPkgBody-arg-line}"/>
		
		<exec dir="${src}/rowcps" executable="sqlplus" output="rowcps-load-CWMS-Project-Pkg-body-output.txt" error="rowcps-load-CWMS-Project-Pkg-body-error.txt" resultproperty="rowcps-load-CWMS-Project-Pkg-body-result">
			<arg line="${rowcpsLoadCWMSProjectPkgBody-arg-line}"/>
		</exec>	
		
		<if>
			<equals arg1="${rowcps-load-CWMS-Project-Pkg-body-result}" arg2="0" />
			<then>
				<echo message="Finished Loading CWMS project Package Body"/>
			</then>
			<else>
				<concat>
					<filelist dir="${root}" files="rowcps-load-CWMS-Project-Pkg-body-output.txt,rowcps-load-CWMS-Project-Pkg-body-error.txt"/>
				</concat>				
				<echo message="${rowcps-load-CWMS-Project-Pkg-body-result}"/>
				<fail/>
			</else>
		</if>
    </target>
	
	<!-- Drop existing CWMS schema then build a new CWMS schema. -->
	<target name="all-schema" depends="clean,build" description="drop existing CWMS schema then build a new CWMS schema">
    </target>
	
    <target name="all" depends="all-schema" description="does a clean build">
    </target>

    <target name="exportSchema" description="Executes python script to export CWMS schema">

                <echo message="Exporting CWMS schema ..."/>

                <property name="autoexportschema-arg-line" value="/c python autoexportschema.py echo=${autoexport.echo} inst=${oracle.cwms.instance} sys_passwd=${oracle.sys.password} cwms_passwd=${oracle.cwms.password} cwms_schema=${oracle.cwms.user} cwms_dir=${oracle.cwms.dir}  ccp_passwd=${oracle.ccp.password} ${autoexportschema.force}"/>
                <echo message="${autoexportschema-arg-line}"/>

                <exec dir="${src}" executable="cmd" output="auto-export-schema-output.txt" error="auto-export-schema-error.txt" resultproperty="auto-export-schema-result" failonerror="true">
                        <arg line="${autoexportschema-arg-line}"/>
                </exec>

                <if>
                        <equals arg1="${auto-export-schema-result}" arg2="0" />
                        <then>
                                <echo message="Finished exporting CWMS schema"/>
                        </then>
                        <else>
                                <concat>
                                        <filelist dir="${root}" files="auto-export-schema-output.txt,auto-export-schema-error.txt"/>
                                </concat>
                                <echo message="${auto-export-schema-result}"/>
                                <fail/>
                        </else>
                </if>

    </target>

    <target name="export" description="Executes python script to export CWMS tables">

                <echo message="Exporting CWMS tables ..."/>

                <property name="autoexport-arg-line" value="/c python autoexport.py echo=${autoexport.echo} inst=${oracle.cwms.instance} sys_passwd=${oracle.sys.password} cwms_passwd=${oracle.cwms.password} cwms_schema=${oracle.cwms.user} cwms_dir=${oracle.cwms.dir}  ccp_passwd=${oracle.ccp.password} ${autoexport.force} ${build.restricted}"/>
                <echo message="${autoexport-arg-line}"/>

                <exec dir="${src}" executable="cmd" output="auto-export-output.txt" error="auto-export-error.txt" resultproperty="auto-export-result" failonerror="true">
                        <arg line="${autoexport-arg-line}"/>
                </exec>

                <if>
                        <equals arg1="${auto-export-result}" arg2="0" />
                        <then>
                                <echo message="Finished exporting CWMS tables"/>
                        </then>
                        <else>
                                <concat>
                                        <filelist dir="${root}" files="auto-export-output.txt,auto-export-error.txt"/>
                                </concat>
                                <echo message="${auto-export-result}"/>
                                <fail/>
                        </else>
                </if>

    </target>
    <!-- Executes python script to import CWMS tables -->
        <target name="import" description="Executes python script to import CWMS schema">

                <echo message="Importing  CWMS tables ..."/>

                <property name="autoimport-arg-line" value="/c python autoimport.py echo=${autoimport.echo} inst=${oracle.cwms.instance} cwms_passwd=${oracle.cwms.password} cwms_schema=${oracle.cwms.user} sys_passwd=${oracle.sys.password} cwms_dir=${oracle.cwms.dir} ccp_passwd=${oracle.ccp.password} ${autoimport.force} ${build.restricted}"/>
                <echo message="${autoimport-arg-line}"/>

                <exec dir="${src}" executable="cmd" output="auto-import-output.txt" error="auto-import-error.txt" resultproperty="auto-import-result" failonerror="true">
                        <arg line="${autoimport-arg-line}"/>
                </exec>

                <if>
                        <equals arg1="${auto-import-result}" arg2="0" />
                        <then>
                                <echo message="Finished Importting CWMS tables"/>
                        </then>
                        <else>
                                <concat>
                                        <filelist dir="${root}" files="auto-import-output.txt,auto-import-error.txt"/>
                                </concat>
                                <echo message="${auto-import-result}"/>
                                <fail/>
                        </else>
                </if>

    </target>
    <!-- Executes python script to import users -->
        <target name="createUsers" description="Executes python script to recreate CWMS users">

                <echo message="Recreate  CWMS users ..."/>

                <property name="autocreateusers-arg-line" value="/c python autoCreateCWMSUsers.py echo=${autocreateusers.echo} inst=${oracle.cwms.instance} dbi_passwd=${oracle.dbi.password} pd_passwd=${oracle.pd.password} cwms_passwd=${oracle.cwms.password} cwms_schema=${oracle.cwms.user} sys_passwd=${oracle.sys.password} ${autocreateusers.force}"/>
                <echo message="${autocreateusers-arg-line}"/>

                <exec dir="${src}" executable="cmd" output="auto-createusers-output.txt" error="auto-createusers-error.txt" resultproperty="auto-createusers-result" failonerror="true">
                        <arg line="${autocreateusers-arg-line}"/>
                </exec>

                <if>
                        <equals arg1="${auto-createusers-result}" arg2="0" />
                        <then>
                                <echo message="Finished Creating CWMS users"/>
                        </then>
                        <else>
                                <concat>
                                        <filelist dir="${root}" files="auto-createusers-output.txt,auto-createusers-error.txt"/>
                                </concat>
                                <echo message="${auto-createusers-result}"/>
                                <fail/>
                        </else>
                </if>

    </target>
    <target name="rebuild-schema" depends="export,clean,build,import,createUsers" description="export AT tables,drop existing CWMS schema then build a new CWMS schema, import AT data, recreate user accounts">
    </target>
    <target name="rebuild-schema-with-export" depends="exportSchema,export,clean,build,import,createUsers" description="export AT tables,drop existing CWMS schema then build a new CWMS schema, import AT data, recreate user accounts">
    </target>

	<target name="clean-output-files">
		<delete file="auto-build-error.txt"/>
		<delete file="auto-build-output.txt"/>
		<delete file="auto-kill-error.txt"/>
		<delete file="auto-kill-output.txt"/>
		<delete file="build-sql-script-error.txt"/>
		<delete file="build-sql-script-output.txt"/>
		<delete file="local_wcdba_overrides.xml"/>
		<delete file="src/CWMS_AGG_DISTRICT_DATA_TABLE.log"/>
		<delete file="src/CWMS_CITIES_SP_DATA_TABLE.log"/>
		<delete file="src/CWMS_COUNTY_SP_DATA_TABLE.log"/>
		<delete file="src/CWMS_NATION_SP_DATA_TABLE.log"/>
		<delete file="src/CWMS_NID_DATA_TABLE.log"/>
		<delete file="src/CWMS_OFFICES_GEOLOC_DATA_TABLE.log"/>
		<delete file="src/CWMS_STATE_SP_DATA_TABLE.log"/>
		<delete file="src/CWMS_STATION_NWS_DATA_TABLE.log"/>
		<delete file="src/CWMS_STATION_USGS_DATA_TABLE.log"/>
		<delete file="src/CWMS_TIME_ZONE_SP_DATA_TABLE.log"/>
		<delete file="src/CWMS_USACE_DAM_DATA_TABLE.log"/>
		<delete file="src/autobuild.sql"/>
		<delete file="src/autokill.sql"/>
		<delete file="src/buildCWMS_DB.log"/>
		<delete file="src/cwms/defines.sql"/>
		<delete file="src/data/radar_xslt_clobs.ctl"/>
		<delete file="src/data/unit_alias_data.sql"/>
		<delete file="src/dropCwms.sql"/>
		<delete file="src/killCWMS_DB.log"/>
		<delete file="src/mathComputations.pyc"/>
		<delete file="src/py_BuildCwms.sql"/>
		<delete file="src/py_ErocUsers.sql"/>
		<delete file="src/py_Queues.sql"/>
		<delete file="src/py_prompt.sql"/>
		<delete file="src/qualityLoader.ctl"/>
		<delete file="src/qualityLoader.log"/>
		<delete file="src/radar_xslt_clobs.log"/>
		<delete>
			<fileset dir="." includes="**/*.pyc"/>
		</delete>
		<delete file="src/vertcon_clobs.log"/>
		<delete>
			<fileset dir="src/updateScripts" includes="*.log"/>
		</delete>
	</target>

	<!-- TODO: figured out why ${build.dir}/** isn't working -->
	<target name="bundle" depends="clean-output-files">
		<echo message="${build.dir}" />
		<zip destfile="${build.dir}/cwms_db_${pom.version}.zip"
			 basedir="."
			 excludes="${test}/**,${build.dir}/**,.teamcity/**/,.gitignore,v3.0/**,build/**"
		/>
		<resolver:artifacts id="output">
			<resolver:artifact file="${build.dir}/cwms_db_${pom.version}.zip" type="zip" id="bundle" pomref="pom"/>
		</resolver:artifacts>
	</target>
	<target name="install" depends="bundle">
		<resolver:install artifactsref="output" />
	</target> 
	<target name="deploy" depends="bundle">
		<resolver:deploy artifactsref="output">
			<remoteRepo refid="hec-nexus-snapshots"/>
		</resolver:deploy>
	</target>
	

	

</project>

